{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"NServer: a high-level Python DNS Name Server Framework.","text":""},{"location":"#introduction","title":"Introduction","text":"<p>NServer is a Python framework for building customised DNS name servers with a focuses on ease of use over completeness. It implements high level APIs for interacting with DNS queries whilst making very few assumptions about how responses are generated.</p> <p>It is not intended to act like traditional DNS servers such as BIND or CoreDNS and should not be considered a general DNS resolver.</p> <p>NServer has been built upon dnslib however uses high level abstractions that does not give access to the full DNS specification. If this is your desired behaviour I suggest using dnslib and its server API.</p> <p>NServer has been inspired by easy to use high level frameworks such as Flask or Requests.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Flexibility: Receive and respond to DNS queries using python functions</li> <li>Speed: comfortably handle 1000 queries per second on a single thread</li> <li>Protocols: supports UDP, TCP DNS queries<ul> <li>TCP server support request pipelining and connection multiplexing</li> </ul> </li> <li>Development: fully typed for your static analysis / linting needs</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Follow our Quickstart Guide.</p> tldr.py<pre><code>from nserver import NameServer, Query, A\n\nserver = NameServer(\"example\")\n\n@server.rule(\"example.com\", [\"A\"])\ndef example_a_records(query: Query):\n    return A(query.name, \"1.2.3.4\")\n\nif __name__ == \"__main__\":\n    server.run()\n</code></pre> <pre><code>nserver --server tldr.py:server\n</code></pre>"},{"location":"#bugs-feature-requests-etc","title":"Bugs, Feature Requests etc","text":"<p>Please submit an issue on github.</p> <p>In the case of bug reports, please help us help you by following best practices <sup>1</sup> <sup>2</sup>.</p> <p>In the case of feature requests, please provide background to the problem you are trying to solve so to help find a solution that makes the most sense for the library as well as your usecase. Before making a feature request consider looking at my (roughly written) design notes.</p>"},{"location":"#licence","title":"Licence","text":"<p>This project is licenced under the MIT Licence - see <code>LICENCE</code>.</p> <p>This project includes other open source licenced software - see <code>NOTICE</code>.</p>"},{"location":"#authors","title":"Authors","text":"<p>A project by Nicholas Hairs - www.nicholashairs.com.</p>"},{"location":"architecture/","title":"Architecture","text":""},{"location":"architecture/#request-flow","title":"Request Flow","text":""},{"location":"architecture/#server-middleware","title":"Server Middleware","text":""},{"location":"changelog/","title":"Change Log","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#300-2025-07-11","title":"3.0.0 - 2025-07-11","text":"<p>Tip</p> <p>Version <code>3.0.0</code> represents a large incompatible refactor of <code>nserver</code> with version <code>2.0.0</code> considered a \"misfire\". If you have been using functionality from <code>2.0.0</code> or the development branch you should expect a large number of breaking changes.</p>"},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Add Python 3.13 support</li> <li>Generalised CLI interface for running applications; see <code>nserver --help</code>.<ul> <li>Implemented in <code>nserver.cli</code>.</li> </ul> </li> <li><code>nserver.application</code> classes that focus on running a given server instance.<ul> <li>This lays the ground work for different ways of running servers in the future; e.g. using threads.</li> </ul> </li> <li><code>nserver.server.RawNameServer</code> that handles <code>RawMiddleware</code> including exception handling.</li> </ul>"},{"location":"changelog/#removed","title":"Removed","text":"<ul> <li>Drop Python 3.7 support</li> <li><code>nserver.server.SubServer</code> has been removed.<ul> <li><code>NameServer</code> instances can now be registered to other <code>NameServer</code> instances.</li> </ul> </li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>Refactored <code>nserver.server.NameServer</code><ul> <li>\"Raw\" functionality has been removed. This has been moved to the <code>nserver.server.RawNameServer</code>.</li> <li>\"Transport\" and other related \"Application\" functionality has been removed from <code>NameServer</code> instances. This has moved to the <code>nserver.application</code> classes.</li> <li><code>NameServer</code> instances can now be registered to other instances. This replaces <code>SubServer</code> functionality that was in development.</li> </ul> </li> <li>Refactoring of <code>nserver.server</code> and <code>nserver.middleware</code> classes.</li> <li><code>NameServer</code> <code>name</code> argument / attribute is no longer used when creating the logger.</li> </ul>"},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>Uncaught errors from dropped connections in <code>nserver.transport.TCPv4Transport</code> #6</li> </ul>"},{"location":"changelog/#development-changes","title":"Development Changes","text":"<ul> <li>Development tooling has moved to <code>uv</code>.<ul> <li>The tooling remains wrapped in <code>dev.sh</code>.</li> <li>This remove the requirement for <code>docker</code> in local development.</li> </ul> </li> <li>Test suite added to GitHub Actions.</li> <li>Added contributing guidelies.</li> </ul>"},{"location":"changelog/#200-2023-12-20","title":"2.0.0 - 2023-12-20","text":"<ul> <li>Implement Middleware<ul> <li>This includes adding error handling middleware that facilitates error handling.</li> </ul> </li> <li>Add <code>StaticRule</code> and <code>ZoneRule</code>.</li> <li>Refector <code>NameServer.rule</code> to use expanded <code>smart_make_rule</code> function.<ul> <li>Although this change should not affect rules using this decorator from being called correctly, it may change the precise rule type being used. Specifically it may use <code>StaticRule</code> instead of <code>WildcardStringRule</code> for strings with no substitutions.</li> </ul> </li> <li>Add Blueprints<ul> <li>Include refactoring <code>NameServer</code> into a new shared based <code>Scaffold</code> class.</li> </ul> </li> </ul>"},{"location":"changelog/#100-2023-11-03","title":"1.0.0 - 2023-11-03","text":"<ul> <li>Beta release</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome!</p>"},{"location":"contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>In general we follow the Python Software Foundation Code of Conduct. Please note that we are not affiliated with the PSF.</p>"},{"location":"contributing/#pull-request-process","title":"Pull Request Process","text":"<p>0. Before you begin</p> <p>If you're not familiar with contributing to open source software, start by reading this guide.</p> <p>Be aware that anything you contribute will be licenced under the project's licence. If you are making a change as a part of your job, be aware that your employer might own your work and you'll need their permission in order to licence the code.</p>"},{"location":"contributing/#1-find-something-to-work-on","title":"1. Find something to work on","text":"<p>Where possible it's best to stick to established issues where discussion has already taken place. Contributions that haven't come from a discussed issue are less likely to be accepted.</p> <p>The following are things that can be worked on without an existing issue:</p> <ul> <li>Updating documentation. This includes fixing in-code documentation / comments, and the overall docs.</li> <li>Small changes that don't change functionality such as refactoring or adding / updating tests.</li> </ul>"},{"location":"contributing/#2-fork-the-repository-and-make-your-changes","title":"2. Fork the repository and make your changes","text":"<p>We don't have styling documentation, so where possible try to match existing code. This includes the use of \"headings\" and \"dividers\" (this will make sense when you look at the code).</p> <p>Common devleopment tooling has been wrapped in <code>dev.sh</code> (which uses <code>uv</code> under the hood).</p> <p>Before creating your pull request you'll want to format your code and run the linters and tests:</p> <pre><code># Format\n./dev.sh format\n\n# Lint\n./dev.sh lint\n\n# Tests\n./dev.sh test\n</code></pre> <p>If making changes to the documentation you can preview the changes locally using <code>./dev.sh docs</code>. Changes to the README can be previewed using <code>grip</code> (not included in <code>dev</code> dependencies).</p> <p>Note</p> <p>In general we will always squash merge pull requests so you do not need to worry about a \"clean\" commit history.</p>"},{"location":"contributing/#3-checklist","title":"3. Checklist","text":"<p>Before pushing and creating your pull request, you should make sure you've done the following:</p> <ul> <li>Updated any relevant tests.</li> <li>Formatted your code and run the linters and tests.</li> <li>Updated the version number in <code>pyproject.toml</code>. In general using a <code>.devN</code> suffix is acceptable.   This is not required for changes that do no affect the code such as documentation.</li> <li>Add details of the changes to the change log (<code>docs/changelog.md</code>), creating a new section if needed.</li> <li>Add notes for new / changed features in the relevant docstring.</li> </ul> <p>4. Create your pull request</p> <p>When creating your pull request be aware that the title and description will be used for the final commit so pay attention to them.</p> <p>Your pull request description should include the following:</p> <ul> <li>Why the pull request is being made</li> <li>Summary of changes</li> <li>How the pull request was tested - especially if not covered by unit testing.</li> </ul> <p>Once you've submitted your pull request make sure that all CI jobs are passing. Pull requests with failing jobs will not be reviewed.</p>"},{"location":"contributing/#5-code-review","title":"5. Code review","text":"<p>Your code will be reviewed by a maintainer.</p> <p>If you're not familiar with code review start by reading this guide.</p> <p>Remember you are not your work</p> <p>You might be asked to explain or justify your choices. This is not a criticism of your value as a person!</p> <p>Often this is because there are multiple ways to solve the same problem and the reviewer would like to understand more about the way you solved.</p>"},{"location":"contributing/#common-topics","title":"Common Topics","text":""},{"location":"contributing/#versioning-and-breaking-compatability","title":"Versioning and breaking compatability","text":"<p>This project uses semantic versioning.</p> <p>In general backwards compatability is always preferred.</p> <p>Feature changes MUST be compatible with all security supported versions of Python and SHOULD be compatible with all unsupported versions of Python where recent downloads over the last 90 days exceeds 10% of all downloads.</p> <p>In general, only the latest <code>major.minor</code> version of NServer is supported. Bug fixes and feature backports requiring a version branch may be considered but must be discussed with the maintainers first.</p> <p>See also Security Policy.</p>"},{"location":"contributing/#spelling","title":"Spelling","text":"<p>The original implementation of this project used Australian spelling so it will continue to use Australian spelling for all code.</p> <p>Documentation is more flexible and may use a variety of English spellings.</p>"},{"location":"contributing/#contacting-the-maintainers","title":"Contacting the Maintainers","text":"<p>In general it is preferred to keep communication to GitHub, e.g. through comments on issues and pull requests. If you do need to contact the maintainers privately, please do so using the email addresses in the maintainers section of the <code>pyproject.toml</code>.</p>"},{"location":"error-handling/","title":"Error Handling","text":"<p>Custom exception handling is handled through the <code>QueryExceptionHandlerMiddleware</code> and <code>RawExceptionHandlerMiddleware</code> Middleware. These middleware will catch any <code>Exception</code>s raised by their respective middleware stacks.</p> <p>In general you are probably able to use the <code>QueryExceptionHandlerMiddleware</code> as the <code>RawExceptionHandlerMiddleware</code> is only needed to catch exceptions resulting from <code>RawMiddleware</code> or broken exception handlers in the <code>QueryExceptionHandlerMiddleware</code>. If you only write <code>QueryMiddleware</code> and your <code>QueryExceptionHandlerMiddleware</code> handlers never raise exceptions then you'll be good to go with just the <code>QueryExceptionHandlerMiddleware</code>.</p> <p>Both of these middleware have a default exception handler that will be used for anything not matching a registered handler. The default handler can be overwritten by registering a handler for the <code>Exception</code> class.</p> <p>Handlers are chosen by finding a handler for the most specific parent class of the thrown exception (including the class of the exception). These classes are searched in method resolution order.</p> <p>Note</p> <p>These handlers only handle exceptions that are subclasses of (and including) <code>Exception</code>. Exceptions that are only children of <code>BaseException</code> (e.g. <code>SystemExit</code>) will not be caught by these handlers.</p>"},{"location":"error-handling/#registering-exception-handlers","title":"Registering Exception Handlers","text":"<p>Exception handlers can be registered to <code>NameServer</code> and <code>RawNameSeerver</code> instances using either their <code>@exception_handler</code> decorators or their <code>register_exception_handler</code> methods.</p> <pre><code>import dnslib\nfrom nserver import NameServer, Query, Response\n\nserver = NameServer(\"example\")\n\n@server.exception_handler(NotImplementedError)\ndef not_implemented_handler(exception: NotImplementedError, query: Query) -&gt; Response:\n    return Response(error_code=dnslib.RCODE.NOTIMPL)\n\n@server.raw_exception_handler(Exception)\ndef print_debugger(exception: Exception, record: dnslib.DNSRecord) -&gt; dnslib.DNSRecord:\n    print(f\"failed to process {record} due to {exception!r})\n    response = record.reply()\n    response.header.rcode =dnslib.RCODE.SERVFAIL\n    return response\n</code></pre>"},{"location":"external-resources/","title":"External Resources","text":"<p>Have a great project or resource that should be listed? Submit an issue on github telling us why it's awsome and we'll look at including it.</p>"},{"location":"external-resources/#projects-using-nserver","title":"Projects using NServer","text":"<p>Need inspiration? Here are some projects that use NServer:</p> <ul> <li>nhairs/domain-park: An authorative name server for securely parking domains.</li> <li>it's lonely here :(</li> </ul>"},{"location":"external-resources/#guides-blogs-talks-etc","title":"Guides, Blogs, Talks, etc","text":"<ul> <li>it's lonely here :(</li> </ul>"},{"location":"middleware/","title":"Middleware","text":"<p>Middleware can be used to modify the behaviour of a server seperate to the individual rules that are registered to the server. Middleware is run on all requests and can modify both the input and response of a request.</p>"},{"location":"middleware/#middleware-stacks","title":"Middleware Stacks","text":"<p>Middleware operates in a stack with each middleware calling the middleware below it until one returns and the result is propagated back up the chain. NServer uses two stacks, the outmost stack deals with raw DNS records (<code>RawMiddleware</code>), which will eventually convert the record to a <code>Query</code> which will then be passed to the main <code>QueryMiddleware</code> stack.</p> <p>Middleware can be added to the application until it is run. Once the server begins running the middleware cannot be modified. The ordering of middleware is kept in the order in which it is added to the server; that is the first middleware registered will be called before the second and so on.</p> <p>Some middleware is automatically added when the stacks are processed.</p>"},{"location":"middleware/#querymiddleware","title":"<code>QueryMiddleware</code>","text":"<p>For most use cases you likely want to use <code>QueryMiddleware</code>. This middleware uses the high-level <code>Query</code> and <code>Response</code> objects.</p>"},{"location":"middleware/#registering-querymiddleware","title":"Registering <code>QueryMiddleware</code>","text":"<p><code>QueryMiddleware</code> can be registered to <code>NameServer</code> instances using their <code>register_middleware</code> methods.</p> <pre><code>from nserver import NameServer\nfrom nserver.middleware import QueryMiddleware\n\nserver = NameServer(\"example\")\nserver.register_middleware(QueryMiddleware())\n</code></pre>"},{"location":"middleware/#creating-your-own-querymiddleware","title":"Creating your own <code>QueryMiddleware</code>","text":"<p>Using an unmodified <code>QueryMiddleware</code> isn't very interesting as it just passes the request onto the next middleware. To add your own middleware you should subclass <code>QueryMiddleware</code> and override the <code>process_query</code> method.</p> <pre><code># ...\nfrom typing import Callable\nfrom nserver import Query, Response\n\nclass MyLoggingMiddleware(QueryMiddleware):\n    def __init__(self, logging_name: str):\n        super().__init__()\n        self.logger = logging.getLogger(f\"my-awesome-app.{logging_name}\")\n        return\n\n    def process_query(\n        query: Query, call_next: Callable[[Query], Response]\n    ) -&gt; Response:\n        self.logger.info(f\"processing {query.name}\")\n        response = call_next(query)\n        self.logger.info(f\"done processing, returning {response.error_code}\")\n        return response\n\nserver.register_middleware(MyLoggingMiddleware(\"foo\"))\nserver.register_middleware(MyLoggingMiddleware(\"bar\"))\n</code></pre>"},{"location":"middleware/#default-querymiddleware-stack","title":"Default <code>QueryMiddleware</code> stack","text":"<p>Once processed the <code>QueryMiddleware</code> stack will look as follows:</p> <ul> <li><code>QueryExceptionHandlerMiddleware</code><ul> <li>Customisable error handler for <code>Exception</code>s originating from within the stack.</li> </ul> </li> <li><code>&lt;registered middleware&gt;</code></li> <li><code>HookMiddleware</code><ul> <li>Runs hooks registered to the server. This can be considered a simplified version of middleware.</li> </ul> </li> </ul>"},{"location":"middleware/#rawmiddleware","title":"<code>RawMiddleware</code>","text":"<p><code>RawMiddleware</code> allows for modifying the raw <code>dnslib.DNSRecord</code>s that are recevied and sent by the server.</p>"},{"location":"middleware/#registering-rawmiddleware","title":"Registering <code>RawMiddleware</code>","text":"<p><code>RawMiddleware</code> can be registered to <code>RawNameServer</code> instances using their <code>register_middleware</code> method.</p> <pre><code># ...\nfrom nserver import RawNameServer\nfrom nserver.middleware import RawMiddleware\n\nraw_server = RawNameServer(server)\n\nserver.register_middleware(RawMiddleware())\n</code></pre>"},{"location":"middleware/#creating-your-own-rawmiddleware","title":"Creating your own <code>RawMiddleware</code>","text":"<p>Using an unmodified <code>RawMiddleware</code> isn't very interesting as it just passes the request onto the next middleware. To add your own middleware you should subclass <code>RawMiddleware</code> and override the <code>process_record</code> method.</p> <pre><code># ...\n\nclass SizeLimiterMiddleware(RawMiddleware):\n    def __init__(self, max_size: int):\n        super().__init__()\n        self.max_size = max_size\n        return\n\n    def process_record(\n        record: dnslib.DNSRecord,\n        call_next: Callable[[dnslib.DNSRecord], dnslib.DNSRecord],\n    ) -&gt; dnslib.DNSRecord:\n        refused = record.reply()\n        refused.header.rcode = dnslib.RCODE.REFUSED\n\n        if len(record.pack()) &gt; self.max_size:\n            return refused\n\n        response = call_next(query)\n\n        if len(response.pack()) &gt; self.max_size:\n            return refused\n\n        return response\n\nserver.register_middleware(SizeLimiterMiddleware(1400))\n</code></pre>"},{"location":"middleware/#default-rawmiddleware-stack","title":"Default <code>RawMiddleware</code> stack","text":"<p>Once processed the <code>RawMiddleware</code> stack will look as follows:</p> <ul> <li><code>RawExceptionHandlerMiddleware</code><ul> <li>Customisable error handler for <code>Exception</code>s originating from within the stack.</li> </ul> </li> <li><code>&lt;registered raw middleware&gt;</code></li> </ul>"},{"location":"production-deployment/","title":"Production Deployment","text":"<p>Although NServer applications can be exposed directly, for production deployments it's recommended that you run your NServer application behind a reverse proxy (similar to how you would run HTTP application with uWSGI or NGINX).</p> <p>There are a few reasons for this:</p> <ul> <li>NServer is currently beta software. Although care has been taken when writing the server, it has not been thoroughly tested for bugs, nor has it had a security assessment done.</li> <li>The server is single threaded and queries will be handled one at a time.</li> <li>The server currently only provides UDP and TCP queries - it does not support DNS-over-HTTPS nor are there plans to do so.</li> <li>Public DNS resolvers and name servers are regularly targetted for all kinds of attacks. Rather than re-implementing defences such as rate-limiting we can re-use existing mechanisms.</li> <li>NServer does not currently include response caching.</li> </ul>"},{"location":"production-deployment/#deployment-using-coredns","title":"Deployment using CoreDNS","text":"<p>CoreDNS is a extendable DNS server written in Go. It has many plugins available which we can use to quickly configure our public facing servers allowing us to keep our NServer application private.</p> <p>In order to get the most performance out of our NServer instance we should operate it using the <code>TCPv4</code> transport as this will allow CoreDNS to reuse the connection for many queries whilst ensuring that even under high load queries are not lost.</p> <p>Note</p> <p>The following Corefile uses external plugins which will require you to build CoreDNS with the external plugins.</p> sample.corefile<pre><code># send all requests to this block (.) and use standard DNS port (53).\n.:53 {\n    # bind server to your public IP address\n    # note: you likely do NOT want to bind to 0.0.0.0 as this may overwrite\n    # your system's DNS resolver crippling it.\n    bind &lt;your-public-ip&gt;\n\n    # timeout if we take longer than 5001ms to respond\n    cancel\n\n    # request rate-limting\n    # plugin.cfg: ratelimit:github.com/milgradesec/ratelimit\n    ratelimit 20\n\n    # response rate-limiting\n    # (mitigate amplification attacks with response rate limiting)\n    # plugin.cfg: rrl:github.com/coredns/rrl/plugins/rrl\n    rrl . {\n        responses-per-second 10\n        requests-per-second  10\n    }\n\n    # response cache\n    cache 3600 . {\n        success 10000 3600 300\n        denial   5000 3600 300\n    }\n\n    # forward all requests (that miss the cache) to our NServer application\n    # running on the default port.\n    forward . 127.0.0.1:9953 {\n        force_tcp\n    }\n\n    # enable error logging\n    errors\n}\n</code></pre>"},{"location":"quickstart/","title":"Quickstart","text":""},{"location":"quickstart/#installation","title":"Installation","text":""},{"location":"quickstart/#install-via-pip","title":"Install via pip","text":"<pre><code>pip3 install nserver\n</code></pre>"},{"location":"quickstart/#minimal-server","title":"Minimal Server","text":""},{"location":"quickstart/#preparing-our-server","title":"Preparing our server","text":"minimal_server.py<pre><code>from nserver import NameServer, Query, A\n\nserver = NameServer(\"example\")\n\n@server.rule(\"example.com\", [\"A\"])\ndef example_a_records(query: Query):\n    return A(query.name, \"1.2.3.4\")\n</code></pre> <p>Here's what this code does:</p> <ol> <li> <p>To start we import:</p> <ul> <li><code>NameServer</code> - an instance of this class will contain our application</li> <li><code>Query</code> - instances of this class will be passed to our rule functions so that we can inspect the incoming DNS query</li> <li><code>A</code> - the class used to create DNS <code>A</code> records</li> </ul> </li> <li> <p>Next we create a <code>NameServer</code> instance for our application to use. The name we give the server will be used to help distinguish it from others that are also running.</p> </li> <li> <p>We then use the <code>rule</code> decorator to tell our server when to trigger our function. In this case we will trigger for <code>A</code> queries that exactly match the name <code>example.com</code>.</p> </li> <li> <p>When triggered our function will then return a single <code>A</code> record as a response.</p> </li> </ol>"},{"location":"quickstart/#running-our-server","title":"Running our server","text":"<p>With our server written we can now run it using the <code>nserver</code> CLI:</p> <p><pre><code>nserver --server path/to/minimal_server.py\n</code></pre> <pre><code>[INFO] Starting UDPv4Transport(address='localhost', port=5300)\n</code></pre></p> <p>We can access it using <code>dig</code>.</p> <pre><code>dig -p 5300 @localhost A example.com\n</code></pre> <pre><code>; &lt;&lt;&gt;&gt; DiG 9.18.12-0ubuntu0.22.04.3-Ubuntu &lt;&lt;&gt;&gt; -p 5300 @localhost A example.com\n; (1 server found)\n;; global options: +cmd\n;; Got answer:\n;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 20379\n;; flags: qr aa rd ra ad; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0\n\n;; QUESTION SECTION:\n;example.com.           IN  A\n\n;; ANSWER SECTION:\nexample.com.        300 IN  A   1.2.3.4\n\n;; Query time: 324 msec\n;; SERVER: 127.0.0.1#5300(localhost) (UDP)\n;; WHEN: Thu Nov 02 21:27:12 AEDT 2023\n;; MSG SIZE  rcvd: 45\n</code></pre>"},{"location":"quickstart/#rules","title":"Rules","text":"<p>Rules tell our server which queries to send to which functions. NServer ships with a number of rule types.</p> <ul> <li><code>StaticRule</code> matches on an exact string.</li> <li><code>ZoneRule</code> matches the given domain and all subdomains.</li> <li><code>WildcardStringRule</code> which allows writing rules using a shorthand syntax.</li> <li><code>RegexRule</code> which uses regular expressions for matching.</li> </ul> <p>The <code>NameServer.rule</code> decorator uses <code>smart_make_rule</code> to automatically select the \"best\" matching rule type based on the input. This will result in string (<code>str</code>) rules will be used to create either a <code>WildcardStringRule</code> or a <code>StaticRule</code>, whilst regular expression (<code>typing.Pattern</code>) rules will create a <code>RegexRule</code>. This decorator also return the original function unchanged meaning it is possible to decorate the same function with multiple rules.</p> <pre><code>@saerver.rule(\"google-dns\", [\"A\"])\ndef this_will_be_a_static_rule(query):\n    return A(query.name, \"8.8.8.8\")\n\n@server.rule(\"{base_name}\", [\"A\"])\n@server.rule(\"www.{base_name}\", [\"A\"])\n@server.rule(\"mail.{base_name}\", [\"A\"])\ndef we_only_have_three_servers_for_everything(query):\n    return list(A(query.name, f\"1.1.1.{i+1}\") for i in range(3))\n</code></pre> <p>Rules can also be added to a server by calling the <code>register_rule</code> method with an exiting rule.</p> <pre><code>from nserver import RegexRule\n\nserver.register_rule(\n    RegexRule(\n        re.compile(r\"[0-9a-f]{1-4}\\.com\"),\n        [\"A\"],\n        lambda q: return A(q.name, \"1.2.3.4\"),\n    )\n)\n</code></pre> <p>By default all rules match in a case-insensitive manner. This is the expected behaviour for name servers operating on the internet. You can override this by setting <code>case_sensitive=True</code> in the constructors or <code>rule</code> decorator.</p>"},{"location":"quickstart/#the-wildcardstringrule","title":"The <code>WildcardStringRule</code>","text":"<p>The <code>WildcardStringRule</code> allows using a shorthand notation for matching DNS names.</p> <ul> <li><code>*</code> will match a single label in the query domain</li> <li><code>**</code> will match one or more labels in the query domain (in a greedy manner)</li> <li><code>{base_name}</code> will match the \"base\" of the query name using the Public Suffix List. In general this means the \"registered\" domain for public TLDs or the last label for non-TLDs (e.g. <code>.local</code>, <code>.internal</code>).</li> </ul> <p>For example:</p> <ul> <li><code>*.example.com.au</code> will match all first level subdomains of <code>example.com.au</code>, but will not match <code>example.com.au</code> or <code>foo.bar.example.com.au</code>.</li> <li><code>**.example.com.au</code> will match all subdomains of <code>example.com.au</code> but will not match <code>example.com.au</code>.</li> <li><code>www.{base_name}</code> will match <code>www</code> on all registered and internal domains (<code>www.example.com.au</code>, <code>www.au</code>) but will not match on other subdomains, or as a registered name (<code>www.com.au</code>, <code>www.foo.au</code>)</li> </ul>"},{"location":"quickstart/#responses","title":"Responses","text":"<p>Rule functions are expected to return only the following types:</p> <ul> <li><code>None</code></li> <li>A single record instance (of any type)</li> <li>A list of record instances (of any record type, including mixed)</li> <li>A <code>Response</code> instance</li> </ul> <p>When records are returned, these will automatically be added to a <code>Response</code> instance as answer records. For simple responses this is usually enough. When <code>None</code> is returned it will be converted to an empty response.</p> <p>However if you wish to return Additional or Authority Records, or change the Error Code you will need to return a <code>Response</code> instance.</p> <p>For example a typical <code>NS</code> lookup when our application is the authoritive server for the domain may look like this:</p> <pre><code># ... server setup exlcuded\n\nfrom nserver import Response, NS, A, SOA\n\nMY_SERVERS = {\n    \"ns1.example.com\": \"1.2.3.4\",\n    \"ns2.example.com\": \"1.2.3.5\",\n    \"ns-backup.example.com\": \"9.8.7.6\",\n}\n\n@server.rule(\"example.com\", [\"NS\"])\ndef name_servers(query: Query) -&gt; Response:\n    response = Response()\n    for ns, ip in MY_SERVERS.items():\n        response.answers.append(NS(query.name, ns))\n        response.additional.append(A(ns, ip))\n    response.authority.append(SOA(\n        \"example.com\",\n        list(MY_SERVERS.keys())[0],\n        \"admin.example.com\",\n        1,\n    ))\n    return response\n</code></pre>"},{"location":"security/","title":"Security Policy","text":""},{"location":"security/#supported-versions","title":"Supported Versions","text":"<p>Security support for Python JSON Logger is provided for all security supported versions of Python and for unsupported versions of Python where recent downloads over the last 90 days exceeds 10% of all downloads.</p> <p>As of 2024-11-22 security support is provided for Python versions <code>3.8+</code>.</p>"},{"location":"security/#reporting-a-vulnerability","title":"Reporting a Vulnerability","text":"<p>Please report vulnerabilties using GitHub.</p>"},{"location":"subserver-blueprint/","title":"Sub-Servers and Blueprints","text":""},{"location":"subserver-blueprint/#sub-servers","title":"Sub-Servers","text":"<p>To allow for composing an application into different parts, a <code>NameServer</code> can be included in another <code>NameServer</code>.</p> <p>Use cases:</p> <ul> <li>Split up your application across different servers for maintainability / composability.</li> <li>Reuse a server registered under different rules.</li> <li>Allow custom packages to define their own rules that you can add to your own server.</li> </ul>"},{"location":"subserver-blueprint/#using-sub-servers","title":"Using Sub-Servers","text":"<pre><code>from nserver import NameServer, ZoneRule, ALL_CTYPES, A, TXT\n\n# First child NameServer\nmysite = NameServer(\"mysite\")\n\n@mysite.rule(\"nicholashairs.com\", [\"A\"])\n@mysite.rule(\"www.nicholashairs.com\", [\"A\"])\ndef nicholashairs_website(query: Query) -&gt; A:\n    return A(query.name, \"159.65.13.73\")\n\n@mysite.rule(ZoneRule, \"\", ALL_CTYPES)\ndef nicholashairs_catchall(query: Query) -&gt; None:\n    # Return empty response for all other queries\n    return None\n\n# Second child NameServer\nen_subserver = NameServer(\"english-speaking-blueprint\")\n\n@en_subserver.rule(\"hello.{base_domain}\", [\"TXT\"])\ndef en_hello(query: Query) -&gt; TXT:\n    return TXT(query.name, \"Hello There!\")\n\n# Register to main NameServer\nserver = NameServer(\"server\")\nserver.register_subserver(mysite, ZoneRule, \"nicholashairs.com\", ALL_CTYPES)\nserver.register_subserver(en_subserver, ZoneRule, \"au\", ALL_CTYPES)\nserver.register_subserver(en_subserver, ZoneRule, \"nz\", ALL_CTYPES)\nserver.register_subserver(en_subserver, ZoneRule, \"uk\", ALL_CTYPES)\n</code></pre>"},{"location":"subserver-blueprint/#middleware-hooks-and-exception-handling","title":"Middleware, Hooks, and Exception Handling","text":"<p>Don't forget that each <code>NameServer</code> maintains it's own middleware stack, exception handlers, and hooks.</p> <p>In particular errors will not propagate up from a child server to it's parent as the child's exception handler will catch any exception and return a response.</p>"},{"location":"subserver-blueprint/#blueprints","title":"Blueprints","text":"<p><code>Blueprint</code>s act as a container for rules. They are an efficient way to compose your application if you do not want or need to use functionality provided by a <code>QueryMiddleware</code> stack.</p>"},{"location":"subserver-blueprint/#using-blueprints","title":"Using Blueprints","text":"<pre><code># ...\nfrom nserver import Blueprint, MX\n\nno_email_blueprint = Blueprint(\"noemail\")\n\n@no_email_blueprint.rule(\"{base_domain}\", [\"MX\"])\n@no_email_blueprint.rule(\"**.{base_domain}\", [\"MX\"])\ndef no_email(query: Query) -&gt; MX:\n    \"Indicate that we do not have a mail exchange\"\n    return MX(query.name, \".\", 0)\n\n\n## Add it to our sub-servers\nen_subserver.register_rule(no_email_blueprint)\n\n# Problem! Because we have already registered the nicholashairs_catchall rule,\n# it will prevent our blueprint from being called. So instead let's manually\n# insert it as the first rule.\nmysite.rules.insert(0, no_email_blueprint)\n</code></pre>"},{"location":"subserver-blueprint/#key-differences-with-nameserver","title":"Key differences with <code>NameServer</code>","text":"<ul> <li>Only provides the <code>@rule</code> decorator and <code>register_rule</code> method.<ul> <li>It does not have a <code>QueryMiddleware</code> stack which means it does not support hooks or error-handling.</li> </ul> </li> <li>Is used directly in <code>register_rule</code> (e.g. <code>some_server.register_rule(my_blueprint)</code>).</li> <li> <p>If rule does not match an internal rule will continue to the next rule in the parent server.</p> <p>In comparison <code>NameServer</code> instances will return <code>NXDOMAIN</code> if a rule doesn't match their internal rules.</p> </li> </ul>"},{"location":"reference/nserver/","title":"Index","text":""},{"location":"reference/nserver/#nserver","title":"nserver","text":""},{"location":"reference/nserver/application/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> application","text":""},{"location":"reference/nserver/application/#nserver.application","title":"nserver.application","text":""},{"location":"reference/nserver/application/#nserver.application.BaseApplication","title":"BaseApplication","text":"<pre><code>BaseApplication(server: NameServer | RawNameServer)\n</code></pre> <p>               Bases: <code>LoggingMixin</code></p> <p>Base class for all application classes.</p> <p>New in <code>3.0</code>.</p>"},{"location":"reference/nserver/application/#nserver.application.BaseApplication.run","title":"run","text":"<pre><code>run() -&gt; int | None\n</code></pre> <p>Run this application.</p> <p>Child classes must override this method.</p> <p>Returns:</p> Type Description <code>int | None</code> <p>Integer status code to be returned. <code>None</code> will be treated as <code>0</code>.</p>"},{"location":"reference/nserver/application/#nserver.application.DirectApplication","title":"DirectApplication","text":"<pre><code>DirectApplication(\n    server: NameServer | RawNameServer,\n    transport: TransportBase,\n)\n</code></pre> <p>               Bases: <code>BaseApplication</code></p> <p>Application that directly runs the server.</p> <p>New in <code>3.0</code>.</p>"},{"location":"reference/nserver/application/#nserver.application.DirectApplication.run","title":"run","text":"<pre><code>run() -&gt; int\n</code></pre> <p>Start running the server</p> <p>Returns:</p> Type Description <code>int</code> <p><code>exit_code</code>, <code>0</code> if exited normally</p>"},{"location":"reference/nserver/cli/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> cli","text":""},{"location":"reference/nserver/cli/#nserver.cli","title":"nserver.cli","text":""},{"location":"reference/nserver/cli/#nserver.cli.CliApplication","title":"CliApplication","text":"<p>               Bases: <code>Application</code></p> <p>NServer CLI tool for running servers</p>"},{"location":"reference/nserver/cli/#nserver.cli.CliApplication.get_application","title":"get_application","text":"<pre><code>get_application() -&gt; BaseApplication\n</code></pre> <p>Factory for getting the application based on current settings</p>"},{"location":"reference/nserver/cli/#nserver.cli.CliApplication.get_server","title":"get_server","text":"<pre><code>get_server() -&gt; NameServer | RawNameServer\n</code></pre> <p>Factory for getting the server to run based on current settings</p>"},{"location":"reference/nserver/exceptions/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> exceptions","text":""},{"location":"reference/nserver/exceptions/#nserver.exceptions","title":"nserver.exceptions","text":""},{"location":"reference/nserver/exceptions/#nserver.exceptions.InvalidMessageError","title":"InvalidMessageError","text":"<pre><code>InvalidMessageError(\n    error: Exception,\n    raw_data: bytes,\n    remote_address: str | tuple[str, int],\n)\n</code></pre> <p>               Bases: <code>ValueError</code></p> <p>An invalid DNS message</p> <p>Parameters:</p> Name Type Description Default <code>error</code> <code>Exception</code> <p>The original <code>Exception</code> thrown</p> required <code>raw_data</code> <code>bytes</code> <p>Raw DNS message as pulled from the transport</p> required <code>remote_address</code> <code>str | tuple[str, int]</code> <p>The remote end from the transport</p> required"},{"location":"reference/nserver/middleware/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> middleware","text":""},{"location":"reference/nserver/middleware/#nserver.middleware","title":"nserver.middleware","text":""},{"location":"reference/nserver/middleware/#nserver.middleware.AfterQueryHook","title":"AfterQueryHook  <code>module-attribute</code>","text":"<pre><code>AfterQueryHook: TypeAlias = Callable[[Response], Response]\n</code></pre> <p>Type alias for <code>HookMiddleware.after_query</code> functions.</p>"},{"location":"reference/nserver/middleware/#nserver.middleware.BeforeFirstQueryHook","title":"BeforeFirstQueryHook  <code>module-attribute</code>","text":"<pre><code>BeforeFirstQueryHook: TypeAlias = Callable[[], None]\n</code></pre> <p>Type alias for <code>HookMiddleware.before_first_query</code> functions.</p>"},{"location":"reference/nserver/middleware/#nserver.middleware.BeforeQueryHook","title":"BeforeQueryHook  <code>module-attribute</code>","text":"<pre><code>BeforeQueryHook: TypeAlias = Callable[[Query], RuleResult]\n</code></pre> <p>Type alias for <code>HookMiddleware.before_query</code> functions.</p>"},{"location":"reference/nserver/middleware/#nserver.middleware.QueryCallable","title":"QueryCallable  <code>module-attribute</code>","text":"<pre><code>QueryCallable: TypeAlias = Callable[[Query], Response]\n</code></pre> <p>Type alias for functions that can be used with <code>QueryMiddleware.next_function</code></p>"},{"location":"reference/nserver/middleware/#nserver.middleware.QueryExceptionHandler","title":"QueryExceptionHandler  <code>module-attribute</code>","text":"<pre><code>QueryExceptionHandler: TypeAlias = Callable[\n    [Query, Exception], Response\n]\n</code></pre> <p>Type alias for <code>ExceptionHandlerMiddleware</code> exception handler functions</p>"},{"location":"reference/nserver/middleware/#nserver.middleware.RawExceptionHandler","title":"RawExceptionHandler  <code>module-attribute</code>","text":"<pre><code>RawExceptionHandler: TypeAlias = Callable[\n    [RawRecord, Exception], RawRecord\n]\n</code></pre> <p>Type alias for <code>RawRecordExceptionHandlerMiddleware</code> exception handler functions</p>"},{"location":"reference/nserver/middleware/#nserver.middleware.RawMiddlewareCallable","title":"RawMiddlewareCallable  <code>module-attribute</code>","text":"<pre><code>RawMiddlewareCallable: TypeAlias = Callable[\n    [RawRecord], RawRecord\n]\n</code></pre> <p>Type alias for functions that can be used with <code>RawRecordMiddleware.next_function</code></p>"},{"location":"reference/nserver/middleware/#nserver.middleware.ExceptionHandlerBase","title":"ExceptionHandlerBase","text":"<pre><code>ExceptionHandlerBase(\n    handlers: (\n        dict[\n            type[Exception],\n            Callable[[T_request, Exception], T_response],\n        ]\n        | None\n    ) = None\n)\n</code></pre> <p>               Bases: <code>MiddlewareBase[T_request, T_response]</code></p> <p>Generic base class for middleware exception handlers</p> <p>Attributes:</p> Name Type Description <code>handlers</code> <code>dict[type[Exception], Callable[[T_request, Exception], T_response]]</code> <p>registered exception handlers</p> <p>New in <code>3.0</code>.</p>"},{"location":"reference/nserver/middleware/#nserver.middleware.ExceptionHandlerBase.default_handler","title":"default_handler  <code>staticmethod</code>","text":"<pre><code>default_handler(\n    request: T_request, exception: Exception\n) -&gt; T_response\n</code></pre> <p>Default exception handler</p> <p>Child classes MUST override this method.</p>"},{"location":"reference/nserver/middleware/#nserver.middleware.ExceptionHandlerBase.get_handler","title":"get_handler","text":"<pre><code>get_handler(\n    exception: Exception,\n) -&gt; Callable[[T_request, Exception], T_response]\n</code></pre> <p>Get the exception handler for the given exception</p> <p>Parameters:</p> Name Type Description Default <code>exception</code> <code>Exception</code> <p>the exception we wish to handle</p> required"},{"location":"reference/nserver/middleware/#nserver.middleware.ExceptionHandlerBase.process_request","title":"process_request","text":"<pre><code>process_request(request, call_next)\n</code></pre> <p>Call the next function handling any exceptions that arise</p>"},{"location":"reference/nserver/middleware/#nserver.middleware.ExceptionHandlerBase.set_handler","title":"set_handler","text":"<pre><code>set_handler(\n    exception_class: type[Exception],\n    handler: Callable[[T_request, Exception], T_response],\n    *,\n    allow_overwrite: bool = False\n) -&gt; None\n</code></pre> <p>Add an exception handler for the given exception class</p> <p>Parameters:</p> Name Type Description Default <code>exception_class</code> <code>type[Exception]</code> <p>Exceptions to associate with this handler.</p> required <code>handler</code> <code>Callable[[T_request, Exception], T_response]</code> <p>The handler to add.</p> required <code>allow_overwrite</code> <code>bool</code> <p>Allow overwriting existing handlers.</p> <code>False</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If a handler already exists for the given exception and <code>allow_overwrite</code> is <code>False</code>.</p>"},{"location":"reference/nserver/middleware/#nserver.middleware.ExceptionHandlerBase.set_next_function","title":"set_next_function","text":"<pre><code>set_next_function(\n    next_function: Callable[[T_request], T_response]\n) -&gt; None\n</code></pre> <p>Set the <code>next_function</code> of this middleware</p> <p>Parameters:</p> Name Type Description Default <code>next_function</code> <code>Callable[[T_request], T_response]</code> <p>Callable that this middleware should call next.</p> required"},{"location":"reference/nserver/middleware/#nserver.middleware.HookMiddleware","title":"HookMiddleware","text":"<pre><code>HookMiddleware(\n    before_first_query: (\n        list[BeforeFirstQueryHook] | None\n    ) = None,\n    before_query: list[BeforeQueryHook] | None = None,\n    after_query: list[AfterQueryHook] | None = None,\n)\n</code></pre> <p>               Bases: <code>QueryMiddleware</code></p> <p>Middleware for processing hook functions</p> <p>There are three types of hooks:</p> <p><code>before_first_query</code> hooks will be run once at the time that the first query is received. They take no arguments and return no results. These are guaranteed to run at most once - however if any hook fails it will cause no other hooks to be run. Subsequent queries will continue to be processed regardless of if all <code>before_first_query</code> hooks ran or not.</p> <p><code>before_query</code> hooks will be run before each request. They receive a <code>Query</code> as an argument. If a hooks returns a non <code>None</code> result, process will skip to result processing.</p> <p><code>after_query</code> hooks will be run after a result has been returned from a <code>before_query</code> hook or from the next function in the middleware chain. They take a <code>Response</code> input and must return a <code>Response</code>.</p> <p>Attributes:</p> Name Type Description <code>before_first_query</code> <code>list[BeforeFirstQueryHook]</code> <p><code>before_first_query</code> hooks</p> <code>before_query</code> <code>list[BeforeQueryHook]</code> <p><code>before_query</code> hooks</p> <code>after_query</code> <code>list[AfterQueryHook]</code> <p><code>after_query</code> hooks</p> <code>before_first_query_run</code> <code>bool</code> <p>have we run the <code>before_first_query</code> hooks</p> <code>before_first_query_failed</code> <code>bool</code> <p>did any <code>before_first_query</code> hooks fail</p> <p>New in <code>3.0</code>.</p> <p>Parameters:</p> Name Type Description Default <code>before_first_query</code> <code>list[BeforeFirstQueryHook] | None</code> <p>initial <code>before_first_query</code> hooks to register</p> <code>None</code> <code>before_query</code> <code>list[BeforeQueryHook] | None</code> <p>initial <code>before_query</code> hooks to register</p> <code>None</code> <code>after_query</code> <code>list[AfterQueryHook] | None</code> <p>initial <code>after_query</code> hooks to register</p> <code>None</code>"},{"location":"reference/nserver/middleware/#nserver.middleware.HookMiddleware.set_next_function","title":"set_next_function","text":"<pre><code>set_next_function(\n    next_function: Callable[[T_request], T_response]\n) -&gt; None\n</code></pre> <p>Set the <code>next_function</code> of this middleware</p> <p>Parameters:</p> Name Type Description Default <code>next_function</code> <code>Callable[[T_request], T_response]</code> <p>Callable that this middleware should call next.</p> required"},{"location":"reference/nserver/middleware/#nserver.middleware.MiddlewareBase","title":"MiddlewareBase","text":"<pre><code>MiddlewareBase()\n</code></pre> <p>               Bases: <code>Generic[T_request, T_response]</code>, <code>LoggingMixin</code></p> <p>Generic base class for middleware classes.</p> <p>New in <code>3.0</code>.</p>"},{"location":"reference/nserver/middleware/#nserver.middleware.MiddlewareBase.process_request","title":"process_request","text":"<pre><code>process_request(\n    request: T_request,\n    call_next: Callable[[T_request], T_response],\n) -&gt; T_response\n</code></pre> <p>Process a given request</p> <p>Child classes should override this method with their own logic.</p>"},{"location":"reference/nserver/middleware/#nserver.middleware.MiddlewareBase.set_next_function","title":"set_next_function","text":"<pre><code>set_next_function(\n    next_function: Callable[[T_request], T_response]\n) -&gt; None\n</code></pre> <p>Set the <code>next_function</code> of this middleware</p> <p>Parameters:</p> Name Type Description Default <code>next_function</code> <code>Callable[[T_request], T_response]</code> <p>Callable that this middleware should call next.</p> required"},{"location":"reference/nserver/middleware/#nserver.middleware.QueryExceptionHandlerMiddleware","title":"QueryExceptionHandlerMiddleware","text":"<pre><code>QueryExceptionHandlerMiddleware(\n    handlers: (\n        dict[\n            type[Exception],\n            Callable[[T_request, Exception], T_response],\n        ]\n        | None\n    ) = None\n)\n</code></pre> <p>               Bases: <code>ExceptionHandlerBase[Query, Response]</code>, <code>QueryMiddleware</code></p> <p>Middleware for handling exceptions originating from a <code>QueryMiddleware</code> stack.</p> <p>Allows registering handlers for individual <code>Exception</code> types. Only one handler can exist for a given <code>Exception</code> type.</p> <p>When an exception is encountered, the middleware will search for the first handler that matches the class or parent class of the exception in method resolution order. If no handler is registered will use this classes <code>self.default_exception_handler</code>.</p> <p>New in <code>3.0</code>.</p>"},{"location":"reference/nserver/middleware/#nserver.middleware.QueryExceptionHandlerMiddleware.default_handler","title":"default_handler  <code>staticmethod</code>","text":"<pre><code>default_handler(\n    request: Query, exception: Exception\n) -&gt; Response\n</code></pre> <p>The default exception handler</p>"},{"location":"reference/nserver/middleware/#nserver.middleware.QueryExceptionHandlerMiddleware.get_handler","title":"get_handler","text":"<pre><code>get_handler(\n    exception: Exception,\n) -&gt; Callable[[T_request, Exception], T_response]\n</code></pre> <p>Get the exception handler for the given exception</p> <p>Parameters:</p> Name Type Description Default <code>exception</code> <code>Exception</code> <p>the exception we wish to handle</p> required"},{"location":"reference/nserver/middleware/#nserver.middleware.QueryExceptionHandlerMiddleware.process_request","title":"process_request","text":"<pre><code>process_request(request, call_next)\n</code></pre> <p>Call the next function handling any exceptions that arise</p>"},{"location":"reference/nserver/middleware/#nserver.middleware.QueryExceptionHandlerMiddleware.set_handler","title":"set_handler","text":"<pre><code>set_handler(\n    exception_class: type[Exception],\n    handler: Callable[[T_request, Exception], T_response],\n    *,\n    allow_overwrite: bool = False\n) -&gt; None\n</code></pre> <p>Add an exception handler for the given exception class</p> <p>Parameters:</p> Name Type Description Default <code>exception_class</code> <code>type[Exception]</code> <p>Exceptions to associate with this handler.</p> required <code>handler</code> <code>Callable[[T_request, Exception], T_response]</code> <p>The handler to add.</p> required <code>allow_overwrite</code> <code>bool</code> <p>Allow overwriting existing handlers.</p> <code>False</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If a handler already exists for the given exception and <code>allow_overwrite</code> is <code>False</code>.</p>"},{"location":"reference/nserver/middleware/#nserver.middleware.QueryExceptionHandlerMiddleware.set_next_function","title":"set_next_function","text":"<pre><code>set_next_function(\n    next_function: Callable[[T_request], T_response]\n) -&gt; None\n</code></pre> <p>Set the <code>next_function</code> of this middleware</p> <p>Parameters:</p> Name Type Description Default <code>next_function</code> <code>Callable[[T_request], T_response]</code> <p>Callable that this middleware should call next.</p> required"},{"location":"reference/nserver/middleware/#nserver.middleware.QueryMiddleware","title":"QueryMiddleware","text":"<pre><code>QueryMiddleware()\n</code></pre> <p>               Bases: <code>MiddlewareBase[Query, Response]</code></p> <p>Middleware for interacting with <code>Query</code> objects</p> <p>New in <code>3.0</code>.</p>"},{"location":"reference/nserver/middleware/#nserver.middleware.QueryMiddleware.process_request","title":"process_request","text":"<pre><code>process_request(\n    request: T_request,\n    call_next: Callable[[T_request], T_response],\n) -&gt; T_response\n</code></pre> <p>Process a given request</p> <p>Child classes should override this method with their own logic.</p>"},{"location":"reference/nserver/middleware/#nserver.middleware.QueryMiddleware.set_next_function","title":"set_next_function","text":"<pre><code>set_next_function(\n    next_function: Callable[[T_request], T_response]\n) -&gt; None\n</code></pre> <p>Set the <code>next_function</code> of this middleware</p> <p>Parameters:</p> Name Type Description Default <code>next_function</code> <code>Callable[[T_request], T_response]</code> <p>Callable that this middleware should call next.</p> required"},{"location":"reference/nserver/middleware/#nserver.middleware.RawExceptionHandlerMiddleware","title":"RawExceptionHandlerMiddleware","text":"<pre><code>RawExceptionHandlerMiddleware(\n    handlers: (\n        dict[\n            type[Exception],\n            Callable[[T_request, Exception], T_response],\n        ]\n        | None\n    ) = None\n)\n</code></pre> <p>               Bases: <code>ExceptionHandlerBase[RawRecord, RawRecord]</code></p> <p>Middleware for handling exceptions originating from a <code>RawRecordMiddleware</code> stack.</p> <p>Allows registering handlers for individual <code>Exception</code> types. Only one handler can exist for a given <code>Exception</code> type.</p> <p>When an exception is encountered, the middleware will search for the first handler that matches the class or parent class of the exception in method resolution order. If no handler is registered will use this classes <code>self.default_handler</code>.</p> Important <p>Exception handlers are expected to be robust - that is, they must always return correctly even if they internally encounter an <code>Exception</code>.</p> <p>Attributes:</p> Name Type Description <code>handlers</code> <p>registered exception handlers</p> <p>New in <code>3.0</code>.</p>"},{"location":"reference/nserver/middleware/#nserver.middleware.RawExceptionHandlerMiddleware.default_handler","title":"default_handler  <code>staticmethod</code>","text":"<pre><code>default_handler(\n    request: RawRecord, exception: Exception\n) -&gt; RawRecord\n</code></pre> <p>Default exception handler</p>"},{"location":"reference/nserver/middleware/#nserver.middleware.RawExceptionHandlerMiddleware.get_handler","title":"get_handler","text":"<pre><code>get_handler(\n    exception: Exception,\n) -&gt; Callable[[T_request, Exception], T_response]\n</code></pre> <p>Get the exception handler for the given exception</p> <p>Parameters:</p> Name Type Description Default <code>exception</code> <code>Exception</code> <p>the exception we wish to handle</p> required"},{"location":"reference/nserver/middleware/#nserver.middleware.RawExceptionHandlerMiddleware.process_request","title":"process_request","text":"<pre><code>process_request(request, call_next)\n</code></pre> <p>Call the next function handling any exceptions that arise</p>"},{"location":"reference/nserver/middleware/#nserver.middleware.RawExceptionHandlerMiddleware.set_handler","title":"set_handler","text":"<pre><code>set_handler(\n    exception_class: type[Exception],\n    handler: Callable[[T_request, Exception], T_response],\n    *,\n    allow_overwrite: bool = False\n) -&gt; None\n</code></pre> <p>Add an exception handler for the given exception class</p> <p>Parameters:</p> Name Type Description Default <code>exception_class</code> <code>type[Exception]</code> <p>Exceptions to associate with this handler.</p> required <code>handler</code> <code>Callable[[T_request, Exception], T_response]</code> <p>The handler to add.</p> required <code>allow_overwrite</code> <code>bool</code> <p>Allow overwriting existing handlers.</p> <code>False</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If a handler already exists for the given exception and <code>allow_overwrite</code> is <code>False</code>.</p>"},{"location":"reference/nserver/middleware/#nserver.middleware.RawExceptionHandlerMiddleware.set_next_function","title":"set_next_function","text":"<pre><code>set_next_function(\n    next_function: Callable[[T_request], T_response]\n) -&gt; None\n</code></pre> <p>Set the <code>next_function</code> of this middleware</p> <p>Parameters:</p> Name Type Description Default <code>next_function</code> <code>Callable[[T_request], T_response]</code> <p>Callable that this middleware should call next.</p> required"},{"location":"reference/nserver/middleware/#nserver.middleware.RawMiddleware","title":"RawMiddleware","text":"<pre><code>RawMiddleware()\n</code></pre> <p>               Bases: <code>MiddlewareBase[RawRecord, RawRecord]</code></p> <p>Middleware to be run against raw <code>dnslib.DNSRecord</code>s.</p> <p>New in <code>3.0</code>.</p>"},{"location":"reference/nserver/middleware/#nserver.middleware.RawMiddleware.process_request","title":"process_request","text":"<pre><code>process_request(\n    request: T_request,\n    call_next: Callable[[T_request], T_response],\n) -&gt; T_response\n</code></pre> <p>Process a given request</p> <p>Child classes should override this method with their own logic.</p>"},{"location":"reference/nserver/middleware/#nserver.middleware.RawMiddleware.set_next_function","title":"set_next_function","text":"<pre><code>set_next_function(\n    next_function: Callable[[T_request], T_response]\n) -&gt; None\n</code></pre> <p>Set the <code>next_function</code> of this middleware</p> <p>Parameters:</p> Name Type Description Default <code>next_function</code> <code>Callable[[T_request], T_response]</code> <p>Callable that this middleware should call next.</p> required"},{"location":"reference/nserver/middleware/#nserver.middleware.RawRecord","title":"RawRecord","text":"<p>               Bases: <code>DNSRecord</code></p> <p>Dummy class for type checking as dnslib is not typed</p>"},{"location":"reference/nserver/models/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> models","text":""},{"location":"reference/nserver/models/#nserver.models","title":"nserver.models","text":""},{"location":"reference/nserver/models/#nserver.models.Query","title":"Query","text":"<pre><code>Query(qtype: str, name: str)\n</code></pre> <p>Simplified version of a DNS query.</p> <p>This class acts as an adaptor for dnslib classes.</p> <p>Attributes:</p> Name Type Description <code>type</code> <p>DNS Query Type</p> <code>name</code> <p>DNS query domain name. Note: <code>.</code> is stripped by default, as such the \"root\" will be <code>\"\"</code> (empty string) rather than <code>\".\"</code>.</p> <p>Parameters:</p> Name Type Description Default <code>qtype</code> <code>str</code> <p>The DNS Query Type in string form</p> required <code>name</code> <code>str</code> <p>The name of the query</p> required"},{"location":"reference/nserver/models/#nserver.models.Query.from_dns_question","title":"from_dns_question  <code>classmethod</code>","text":"<pre><code>from_dns_question(question: DNSQuestion) -&gt; Query\n</code></pre> <p>Create a new query from a <code>dnslib.DNSQuestion</code></p>"},{"location":"reference/nserver/models/#nserver.models.Response","title":"Response","text":"<pre><code>Response(\n    answers: OptionalRecordList = None,\n    additional: OptionalRecordList = None,\n    authority: OptionalRecordList = None,\n    error_code: int = dnslib.RCODE.NOERROR,\n)\n</code></pre> <p>Simplified version of a DNS response.</p> <p>This class acts as an adaptor for dnslib classes.</p> <p>Parameters:</p> Name Type Description Default <code>answers</code> <code>OptionalRecordList</code> <p>response answer records</p> <code>None</code> <code>additional</code> <code>OptionalRecordList</code> <p>response additional records</p> <code>None</code> <code>authority</code> <code>OptionalRecordList</code> <p>response authority records</p> <code>None</code> <code>error_code</code> <code>int</code> <p>DNS response error code</p> <code>NOERROR</code>"},{"location":"reference/nserver/models/#nserver.models.Response.get_additional_records","title":"get_additional_records","text":"<pre><code>get_additional_records() -&gt; list[RD]\n</code></pre> <p>Prepare resource records for additional section</p>"},{"location":"reference/nserver/models/#nserver.models.Response.get_answer_records","title":"get_answer_records","text":"<pre><code>get_answer_records() -&gt; list[RD]\n</code></pre> <p>Prepare resource records for answer section</p>"},{"location":"reference/nserver/models/#nserver.models.Response.get_authority_records","title":"get_authority_records","text":"<pre><code>get_authority_records() -&gt; list[RD]\n</code></pre> <p>Prepare resource records for authority section</p>"},{"location":"reference/nserver/records/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> records","text":""},{"location":"reference/nserver/records/#nserver.records","title":"nserver.records","text":""},{"location":"reference/nserver/records/#nserver.records.A","title":"A","text":"<pre><code>A(\n    resource_name: str,\n    ip: str | IPv4Address,\n    ttl: int = 300,\n)\n</code></pre> <p>               Bases: <code>RecordBase</code></p> <p>Ipv4 Address (<code>A</code>) Record.</p> <p>Parameters:</p> Name Type Description Default <code>resource_name</code> <code>str</code> <p>DNS resource name</p> required <code>ip</code> <code>str | IPv4Address</code> <p>IPv4 address of the resource</p> required <code>ttl</code> <code>int</code> <p>record time-to-live in seconds</p> <code>300</code>"},{"location":"reference/nserver/records/#nserver.records.A.to_resource_record","title":"to_resource_record","text":"<pre><code>to_resource_record() -&gt; RR\n</code></pre> <p>Convert Record to a dnslib Resource Record</p>"},{"location":"reference/nserver/records/#nserver.records.AAAA","title":"AAAA","text":"<pre><code>AAAA(\n    resource_name: str,\n    ip: str | IPv6Address,\n    ttl: int = 300,\n)\n</code></pre> <p>               Bases: <code>RecordBase</code></p> <p>Ipv6 Address (<code>AAAA</code>) Record.</p> <p>Parameters:</p> Name Type Description Default <code>resource_name</code> <code>str</code> <p>DNS resource name</p> required <code>ip</code> <code>str | IPv6Address</code> <p>IPv6 address of the resource</p> required <code>ttl</code> <code>int</code> <p>record time-to-live in seconds</p> <code>300</code>"},{"location":"reference/nserver/records/#nserver.records.AAAA.to_resource_record","title":"to_resource_record","text":"<pre><code>to_resource_record() -&gt; RR\n</code></pre> <p>Convert Record to a dnslib Resource Record</p>"},{"location":"reference/nserver/records/#nserver.records.CAA","title":"CAA","text":"<pre><code>CAA(\n    resource_name: str,\n    flags: int,\n    tag: str,\n    value: str,\n    ttl: int = 3600,\n)\n</code></pre> <p>               Bases: <code>RecordBase</code></p> <p>Certificate Authority Authorisation (<code>CAA</code>) Record</p> See also <ul> <li>https://datatracker.ietf.org/doc/html/rfc6844</li> <li>https://support.dnsimple.com/articles/caa-record/</li> </ul> <p>Parameters:</p> Name Type Description Default <code>resource_name</code> <code>str</code> <p>domain name this record applies to</p> required <code>flags</code> <code>int</code> <p>8bit numbers for flags</p> required <code>tag</code> <code>str</code> <p>type of CAA record</p> required <code>value</code> <code>str</code> <p>value for given tag (see RFC for more info)</p> required <code>ttl</code> <code>int</code> <p>record time-to-live in seconds</p> <code>3600</code>"},{"location":"reference/nserver/records/#nserver.records.CAA.to_resource_record","title":"to_resource_record","text":"<pre><code>to_resource_record() -&gt; RR\n</code></pre> <p>Convert Record to a dnslib Resource Record</p>"},{"location":"reference/nserver/records/#nserver.records.CNAME","title":"CNAME","text":"<pre><code>CNAME(resource_name: str, domain: str, ttl: int = 300)\n</code></pre> <p>               Bases: <code>RecordBase</code></p> <p>Canonical Name (<code>CNAME</code>) Record.</p> <p>Parameters:</p> Name Type Description Default <code>resource_name</code> <code>str</code> <p>DNS resource name</p> required <code>domain</code> <code>str</code> <p>canonical domain for this <code>name</code></p> required <code>ttl</code> <code>int</code> <p>record time-to-live in seconds</p> <code>300</code>"},{"location":"reference/nserver/records/#nserver.records.CNAME.to_resource_record","title":"to_resource_record","text":"<pre><code>to_resource_record() -&gt; RR\n</code></pre> <p>Convert Record to a dnslib Resource Record</p>"},{"location":"reference/nserver/records/#nserver.records.MX","title":"MX","text":"<pre><code>MX(\n    resource_name: str,\n    domain: str,\n    priority: int = 10,\n    ttl: int = 300,\n)\n</code></pre> <p>               Bases: <code>RecordBase</code></p> <p>Mail Exchange (<code>MX</code>) Record</p> See also <ul> <li>https://datatracker.ietf.org/doc/html/rfc1035#section-3.3.9</li> <li>https://en.wikipedia.org/wiki/MX_record</li> </ul> <p>Parameters:</p> Name Type Description Default <code>resource_name</code> <code>str</code> <p>DNS resource name</p> required <code>domain</code> <code>str</code> <p>DNS name of mail exchange. Note: <code>domain</code> must not point to a <code>CNAME</code> record.</p> required <code>priority</code> <code>int</code> <p>mail exchange priority (<code>0</code> is highest priority)</p> <code>10</code> <code>ttl</code> <code>int</code> <p>record time-to-live in seconds</p> <code>300</code>"},{"location":"reference/nserver/records/#nserver.records.MX.to_resource_record","title":"to_resource_record","text":"<pre><code>to_resource_record() -&gt; RR\n</code></pre> <p>Convert Record to a dnslib Resource Record</p>"},{"location":"reference/nserver/records/#nserver.records.NS","title":"NS","text":"<pre><code>NS(resource_name: str, domain: str, ttl: int = 3600)\n</code></pre> <p>               Bases: <code>CNAME</code></p> <p>Name Server (<code>NS</code>) Record.</p> See also <ul> <li>https://datatracker.ietf.org/doc/html/rfc1035#section-3.3.11</li> </ul> <p>Parameters:</p> Name Type Description Default <code>resource_name</code> <code>str</code> <p>DNS resource name</p> required <code>domain</code> <code>str</code> <p>domain name of the Name Server</p> required <code>ttl</code> <code>int</code> <p>record time-to-live in seconds</p> <code>3600</code>"},{"location":"reference/nserver/records/#nserver.records.NS.to_resource_record","title":"to_resource_record","text":"<pre><code>to_resource_record() -&gt; RR\n</code></pre> <p>Convert Record to a dnslib Resource Record</p>"},{"location":"reference/nserver/records/#nserver.records.PTR","title":"PTR","text":"<pre><code>PTR(resource_name: str, domain: str, ttl: int = 300)\n</code></pre> <p>               Bases: <code>CNAME</code></p> <p>Pointer (<code>PTR</code>) Record.</p> See also <ul> <li>https://datatracker.ietf.org/doc/html/rfc1035#section-3.3.12</li> </ul> <p>Parameters:</p> Name Type Description Default <code>resource_name</code> <code>str</code> <p>DNS resource name</p> required <code>domain</code> <code>str</code> <p>domain to point to</p> required <code>ttl</code> <code>int</code> <p>record time-to-live in seconds</p> <code>300</code>"},{"location":"reference/nserver/records/#nserver.records.PTR.to_resource_record","title":"to_resource_record","text":"<pre><code>to_resource_record() -&gt; RR\n</code></pre> <p>Convert Record to a dnslib Resource Record</p>"},{"location":"reference/nserver/records/#nserver.records.RecordBase","title":"RecordBase","text":"<pre><code>RecordBase(resource_name: str, ttl: int)\n</code></pre> <p>Base class for all DNS records.</p> <p>Note: MUST NOT be used directly</p> <p>Subclasses must set <code>_record_kwargs</code></p> <p>Parameters:</p> Name Type Description Default <code>resource_name</code> <code>str</code> <p>DNS resource name</p> required <code>ttl</code> <code>int</code> <p>record time-to-live in seconds</p> required"},{"location":"reference/nserver/records/#nserver.records.RecordBase.to_resource_record","title":"to_resource_record","text":"<pre><code>to_resource_record() -&gt; RR\n</code></pre> <p>Convert Record to a dnslib Resource Record</p>"},{"location":"reference/nserver/records/#nserver.records.SOA","title":"SOA","text":"<pre><code>SOA(\n    zone_name: str,\n    primary_name_server: str,\n    admin_email: str,\n    zone_serial: int,\n    refresh_period: int = 86400,\n    retry_period: int = 7200,\n    expires: int = 3600000,\n    minimum_ttl: int = 172800,\n    ttl: int = 3600,\n)\n</code></pre> <p>               Bases: <code>RecordBase</code></p> <p>Start of Authority (`SOA``) Record</p> See also <ul> <li>https://datatracker.ietf.org/doc/html/rfc1035#section-3.3.13</li> <li>https://en.wikipedia.org/wiki/SOA_record</li> </ul> <p>Parameters:</p> Name Type Description Default <code>zone_name</code> <code>str</code> <p>name of the DNS zone</p> required <code>primary_name_server</code> <code>str</code> <p>domain name of primary name server for this domain</p> required <code>admin_email</code> <code>str</code> <p>Domain encoded email address of the administrator responsible for this zone. The part of the email address before the @ becomes the first label of the name; the domain name after the @ becomes the rest of the name. In zone-file format, dots in labels are escaped with backslashes; thus the email address john.doe@example.com would be represented in a zone file as john.doe.example.com.)</p> required <code>zone_serial</code> <code>int</code> <p>Serial number for this zone. If a secondary name server following this one observes an increase in this number, the follower will assume that the zone has been updated and initiate a zone transfer.</p> required <code>refresh_period</code> <code>int</code> <p>Number of seconds after which secondary name servers should query the master for the SOA record, to detect zone changes. Recommendation for small and stable zones: 86400 seconds (24 hours).</p> <code>86400</code> <code>retry_period</code> <code>int</code> <p>Number of seconds after which secondary name servers should retry to request the serial number from the master if the master does not respond. It must be less than Refresh. Recommendation for small and stable zones: 7200 seconds (2 hours).</p> <code>7200</code> <code>expires</code> <code>int</code> <p>Number of seconds after which secondary name servers should stop answering request for this zone if the master does not respond. This value must be bigger than the sum of Refresh and Retry. Recommendation for small and stable zones: 3600000 seconds (1000 hours).</p> <code>3600000</code> <code>minimum_ttl</code> <code>int</code> <p>Used in calculating the time to live for purposes of negative caching. Authoritative name servers take the smaller of the SOA TTL and the SOA MINIMUM to send as the SOA TTL in negative responses. Resolvers use the resulting SOA TTL to understand for how long they are allowed to cache a negative response. Recommendation for small and stable zones: 172800 seconds (2 days)</p> <code>172800</code> <code>ttl</code> <code>int</code> <p>record time-to-live in seconds</p> <code>3600</code>"},{"location":"reference/nserver/records/#nserver.records.SOA.to_resource_record","title":"to_resource_record","text":"<pre><code>to_resource_record() -&gt; RR\n</code></pre> <p>Convert Record to a dnslib Resource Record</p>"},{"location":"reference/nserver/records/#nserver.records.SRV","title":"SRV","text":"<pre><code>SRV(\n    resource_name: str,\n    target: str,\n    port: int,\n    priority: int,\n    weight: int,\n    ttl: int = 300,\n)\n</code></pre> <p>               Bases: <code>RecordBase</code></p> <p>Service (<code>SRV</code>) Record</p> See also <ul> <li>https://datatracker.ietf.org/doc/html/rfc2782</li> </ul> <p>Parameters:</p> Name Type Description Default <code>resource_name</code> <code>str</code> <p>Full name of service in <code>_Service._Proto.Name</code> format.</p> required <code>target</code> <code>str</code> <p>domain name of target host</p> required <code>port</code> <code>int</code> <p>port on target host</p> required <code>priority</code> <code>int</code> <p>priority of target host. <code>0</code> is highest.</p> required <code>weight</code> <code>int</code> <p>relative weight of this <code>target</code> for targets with same <code>priority</code>. <code>0</code> is lowest.</p> required <code>ttl</code> <code>int</code> <p>record time-to-live in seconds</p> <code>300</code>"},{"location":"reference/nserver/records/#nserver.records.SRV.to_resource_record","title":"to_resource_record","text":"<pre><code>to_resource_record() -&gt; RR\n</code></pre> <p>Convert Record to a dnslib Resource Record</p>"},{"location":"reference/nserver/records/#nserver.records.TXT","title":"TXT","text":"<pre><code>TXT(resource_name: str, text: str, ttl: int = 300)\n</code></pre> <p>               Bases: <code>RecordBase</code></p> <p>Text (<code>TXT</code>) Record</p> <p>Parameters:</p> Name Type Description Default <code>resource_name</code> <code>str</code> <p>DNS resource name</p> required <code>text</code> <code>str</code> <p>value of the record</p> required <code>ttl</code> <code>int</code> <p>record time-to-live in seconds</p> <code>300</code>"},{"location":"reference/nserver/records/#nserver.records.TXT.to_resource_record","title":"to_resource_record","text":"<pre><code>to_resource_record() -&gt; RR\n</code></pre> <p>Convert Record to a dnslib Resource Record</p>"},{"location":"reference/nserver/rules/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> rules","text":""},{"location":"reference/nserver/rules/#nserver.rules","title":"nserver.rules","text":""},{"location":"reference/nserver/rules/#nserver.rules.ALL_QTYPES","title":"ALL_QTYPES  <code>module-attribute</code>","text":"<pre><code>ALL_QTYPES: list[str] = list(keys())\n</code></pre> <p>All supported Query Types</p> <p>New in <code>2.0</code>.</p>"},{"location":"reference/nserver/rules/#nserver.rules.ResponseFunction","title":"ResponseFunction  <code>module-attribute</code>","text":"<pre><code>ResponseFunction = Callable[[Query], RuleResult]\n</code></pre> <p>Type Alias for functions that will be called when a rule is matched</p>"},{"location":"reference/nserver/rules/#nserver.rules.RuleResult","title":"RuleResult  <code>module-attribute</code>","text":"<pre><code>RuleResult = Union[\n    Response, RecordBase, List[RecordBase], None\n]\n</code></pre> <p>Type Alias for the result of a rule response function</p>"},{"location":"reference/nserver/rules/#nserver.rules.RegexRule","title":"RegexRule","text":"<pre><code>RegexRule(\n    regex: Pattern,\n    allowed_qtypes: list[str],\n    func: ResponseFunction,\n    case_sensitive: bool = False,\n)\n</code></pre> <p>               Bases: <code>RuleBase</code></p> <p>Rule that uses the provided regex to attempt to match the query name.</p> <p>Parameters:</p> Name Type Description Default <code>regex</code> <code>Pattern</code> <p>compiled regex for matching</p> required <code>allowed_qtypes</code> <code>list[str]</code> <p>match only the given query types</p> required <code>func</code> <code>ResponseFunction</code> <p>response function to call</p> required <code>case_sensitive</code> <code>bool</code> <p>how to case when matching if <code>False</code> will recompile <code>regex</code> with <code>re.IGNORECASE</code></p> <code>False</code>"},{"location":"reference/nserver/rules/#nserver.rules.RegexRule.get_func","title":"get_func","text":"<pre><code>get_func(query: Query) -&gt; ResponseFunction | None\n</code></pre> <p>Same as parent class</p>"},{"location":"reference/nserver/rules/#nserver.rules.RuleBase","title":"RuleBase","text":"<p>Base class for all Rules to inherit from.</p>"},{"location":"reference/nserver/rules/#nserver.rules.RuleBase.get_func","title":"get_func","text":"<pre><code>get_func(query: Query) -&gt; ResponseFunction | None\n</code></pre> <p>From the given query return the function to run, if any.</p> <p>If no function should be run (i.e. because it does not match the rule), then return <code>None</code>.</p> <p>This is to allow more efficient methods when determining a match and getting the rule function may be expensive (e.g. blueprints).</p>"},{"location":"reference/nserver/rules/#nserver.rules.StaticRule","title":"StaticRule","text":"<pre><code>StaticRule(\n    match_string: str,\n    allowed_qtypes: list[str],\n    func: ResponseFunction,\n    case_sensitive: bool = False,\n)\n</code></pre> <p>               Bases: <code>RuleBase</code></p> <p>Rule that matches only the given string</p> <p><code>StaticRule</code> is more efficient than using a <code>WildcardStringRule</code> for static strings.</p> <p>New in <code>2.0</code>.</p> <p>Parameters:</p> Name Type Description Default <code>match_string</code> <code>str</code> <p>string to match</p> required <code>allowed_qtypes</code> <code>list[str]</code> <p>match only the given query types</p> required <code>func</code> <code>ResponseFunction</code> <p>response function to call</p> required <code>case_sensitive</code> <code>bool</code> <p>how to case when matching</p> <code>False</code>"},{"location":"reference/nserver/rules/#nserver.rules.StaticRule.get_func","title":"get_func","text":"<pre><code>get_func(query: Query) -&gt; ResponseFunction | None\n</code></pre> <p>Same as parent class</p>"},{"location":"reference/nserver/rules/#nserver.rules.WildcardStringRule","title":"WildcardStringRule","text":"<pre><code>WildcardStringRule(\n    wildcard_string: str,\n    allowed_qtypes: list,\n    func: ResponseFunction,\n    case_sensitive: bool = False,\n)\n</code></pre> <p>               Bases: <code>RuleBase</code></p> <p>Rule that allows a more concise way of matching query names.</p> <p>The following substitutions can be made:</p> <ul> <li><code>*</code> will match a single domain label</li> <li><code>**</code> will match multiple domain labels</li> <li><code>base_domain</code> will match the registered domain using the Public Suffix List (PSL)</li> </ul> <p>Examples:</p> <ul> <li><code>_dmarc.{base_domain}</code></li> <li><code>*._dkim.**</code></li> <li><code>foo.*.bar.com</code></li> </ul> <p>When operating with <code>case_sensitive=False</code>, both the wildcard string and the query name are covereted to lowercase prior to matching.</p> <p>Parameters:</p> Name Type Description Default <code>wildcard_string</code> <code>str</code> <p>wildcard string to use</p> required <code>allowed_qtypes</code> <code>list</code> <p>match only the given query types</p> required <code>func</code> <code>ResponseFunction</code> <p>response function to call</p> required <code>case_sensitive</code> <code>bool</code> <p>how to case when matching</p> <code>False</code>"},{"location":"reference/nserver/rules/#nserver.rules.WildcardStringRule.get_func","title":"get_func","text":"<pre><code>get_func(query: Query) -&gt; ResponseFunction | None\n</code></pre> <p>Same as parent class</p>"},{"location":"reference/nserver/rules/#nserver.rules.ZoneRule","title":"ZoneRule","text":"<pre><code>ZoneRule(\n    zone: str,\n    allowed_qtypes: list[str],\n    func: ResponseFunction,\n    case_sensitive: bool = False,\n)\n</code></pre> <p>               Bases: <code>RuleBase</code></p> <p>Rule that matches the given domain or any subdomain</p> <p>An empty zone (<code>\"\"</code>) will match any domain as this refers to the domain root (<code>.</code>).</p> <p>New in <code>2.0</code>.</p> <p>Parameters:</p> Name Type Description Default <code>zone</code> <code>str</code> <p>zone root</p> required <code>allowed_qtypes</code> <code>list[str]</code> <p>match only the given query types.</p> required <code>func</code> <code>ResponseFunction</code> <p>response function to call</p> required <code>case_sensitive</code> <code>bool</code> <p>how to case when matching</p> <code>False</code>"},{"location":"reference/nserver/rules/#nserver.rules.ZoneRule.get_func","title":"get_func","text":"<pre><code>get_func(query: Query) -&gt; ResponseFunction | None\n</code></pre> <p>Same as parent class</p>"},{"location":"reference/nserver/rules/#nserver.rules.coerce_to_response","title":"coerce_to_response","text":"<pre><code>coerce_to_response(result: RuleResult) -&gt; Response\n</code></pre> <p>Convert some <code>RuleResult</code> to a <code>Response</code></p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>RuleResult</code> <p>the results to convert</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>unsupported result type</p> <p>New in <code>3.0</code>.</p>"},{"location":"reference/nserver/rules/#nserver.rules.smart_make_rule","title":"smart_make_rule","text":"<pre><code>smart_make_rule(\n    rule: Union[Type[RuleBase], str, Pattern],\n    *args,\n    **kwargs\n) -&gt; RuleBase\n</code></pre> <p>Create a rule using shorthand notation.</p> <p>The exact type of rule returned depends on what is povided by <code>rule</code>.</p> <p>If rule is a</p> <ul> <li><code>RuleBase</code> class, then it is used directly.</li> <li><code>str</code> then it is checked to see if it contains substitutions. If it does then   it will be a <code>WildcardStringRule</code>, else a <code>StaticRule</code>.</li> <li><code>Pattern</code> then a <code>RegexRule</code>.</li> </ul> <p>New in <code>2.0</code></p> <p>Parameters:</p> Name Type Description Default <code>rule</code> <code>Union[Type[RuleBase], str, Pattern]</code> <p>input to process</p> required <code>args</code> <p>extra arguments to provide to the constructor</p> <code>()</code> <code>kwargs</code> <p>extra keyword arguments to provide to the constructor</p> <code>{}</code>"},{"location":"reference/nserver/server/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> server","text":""},{"location":"reference/nserver/server/#nserver.server","title":"nserver.server","text":""},{"location":"reference/nserver/server/#nserver.server.Blueprint","title":"Blueprint","text":"<pre><code>Blueprint(name: str)\n</code></pre> <p>               Bases: <code>RulesMixin</code>, <code>RuleBase</code>, <code>LoggingMixin</code></p> <p>A container for rules that can be registered onto a server</p> <p>It can be registered as normal rule: <code>server.register_rule(blueprint_rule)</code></p> <p>New in <code>3.0</code>.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the server. This is used for internal logging.</p> required"},{"location":"reference/nserver/server/#nserver.server.Blueprint.register_rule","title":"register_rule","text":"<pre><code>register_rule(rule: RuleBase) -&gt; None\n</code></pre> <p>Register the given rule</p> <p>Parameters:</p> Name Type Description Default <code>rule</code> <code>RuleBase</code> <p>the rule to register</p> required"},{"location":"reference/nserver/server/#nserver.server.Blueprint.rule","title":"rule","text":"<pre><code>rule(\n    rule_: type[RuleBase] | str | Pattern, *args, **kwargs\n)\n</code></pre> <p>Decorator for registering a function using <code>smart_make_rule</code>.</p> <p>Changed in <code>2.0</code>: This method now uses <code>smart_make_rule</code>.</p> <p>Parameters:</p> Name Type Description Default <code>rule_</code> <code>type[RuleBase] | str | Pattern</code> <p>rule as per <code>nserver.rules.smart_make_rule</code></p> required <code>args</code> <p>extra arguments to provide <code>smart_make_rule</code></p> <code>()</code> <code>kwargs</code> <p>extra keyword arguments to provide <code>smart_make_rule</code></p> <code>{}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>if <code>func</code> is provided in <code>kwargs</code>.</p>"},{"location":"reference/nserver/server/#nserver.server.MiddlewareMixin","title":"MiddlewareMixin","text":"<pre><code>MiddlewareMixin(*args, **kwargs)\n</code></pre> <p>               Bases: <code>Generic[T_middleware, T_exception_handler]</code></p> <p>Generic mixin for building a middleware stack in a server.</p> <p>Should not be used directly, instead use the servers that implement it: <code>NameServer</code>, <code>RawNameServer</code>.</p> <p>New in <code>3.0</code>.</p>"},{"location":"reference/nserver/server/#nserver.server.MiddlewareMixin.exception_handler_middleware","title":"exception_handler_middleware  <code>property</code>","text":"<pre><code>exception_handler_middleware: T_exception_handler\n</code></pre> <p>Read only accessor for this server's middleware exception handler</p>"},{"location":"reference/nserver/server/#nserver.server.MiddlewareMixin.middleware","title":"middleware  <code>property</code>","text":"<pre><code>middleware: list[T_middleware]\n</code></pre> <p>Accssor for this servers middleware.</p> <p>If the server has been prepared then returns a copy of the prepared middleware. Otherwise returns a mutable list of the registered middleware.</p>"},{"location":"reference/nserver/server/#nserver.server.MiddlewareMixin.append_middleware","title":"append_middleware","text":"<pre><code>append_middleware(middleware: T_middleware) -&gt; None\n</code></pre> <p>Append this middleware to the middleware stack</p> <p>Parameters:</p> Name Type Description Default <code>middleware</code> <code>T_middleware</code> <p>middleware to append</p> required"},{"location":"reference/nserver/server/#nserver.server.MiddlewareMixin.exception_handler","title":"exception_handler","text":"<pre><code>exception_handler(exception_class: type[Exception])\n</code></pre> <p>Decorator for registering a function as an raw exception handler</p> <p>Parameters:</p> Name Type Description Default <code>exception_class</code> <code>type[Exception]</code> <p>The <code>Exception</code> class to register this handler for</p> required"},{"location":"reference/nserver/server/#nserver.server.MiddlewareMixin.middleware_is_prepared","title":"middleware_is_prepared","text":"<pre><code>middleware_is_prepared() -&gt; bool\n</code></pre> <p>Check if the middleware has been prepared.</p>"},{"location":"reference/nserver/server/#nserver.server.MiddlewareMixin.prepare_middleware","title":"prepare_middleware","text":"<pre><code>prepare_middleware() -&gt; None\n</code></pre> <p>Prepare middleware for consumption</p> <p>Child classes should wrap this method to set the <code>next_function</code> on the final middleware in the stack.</p>"},{"location":"reference/nserver/server/#nserver.server.MiddlewareMixin.register_exception_handler","title":"register_exception_handler","text":"<pre><code>register_exception_handler(*args, **kwargs) -&gt; None\n</code></pre> <p>Shortcut for <code>self.exception_handler.set_handler</code></p>"},{"location":"reference/nserver/server/#nserver.server.NameServer","title":"NameServer","text":"<pre><code>NameServer(name: str)\n</code></pre> <p>               Bases: <code>MiddlewareMixin[QueryMiddleware, QueryExceptionHandlerMiddleware]</code>, <code>RulesMixin</code>, <code>LoggingMixin</code></p> <p>High level DNS Name Server for responding to DNS queries.</p> <p>Changed in <code>3.0</code>:</p> <ul> <li>\"Raw\" functionality removed and moved to <code>RawNameServer</code>.</li> <li>\"Transport\" and \"Application\" functionality removed.</li> </ul> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the server. This is used for internal logging.</p> required"},{"location":"reference/nserver/server/#nserver.server.NameServer.exception_handler_middleware","title":"exception_handler_middleware  <code>property</code>","text":"<pre><code>exception_handler_middleware: T_exception_handler\n</code></pre> <p>Read only accessor for this server's middleware exception handler</p>"},{"location":"reference/nserver/server/#nserver.server.NameServer.middleware","title":"middleware  <code>property</code>","text":"<pre><code>middleware: list[T_middleware]\n</code></pre> <p>Accssor for this servers middleware.</p> <p>If the server has been prepared then returns a copy of the prepared middleware. Otherwise returns a mutable list of the registered middleware.</p>"},{"location":"reference/nserver/server/#nserver.server.NameServer.after_query","title":"after_query","text":"<pre><code>after_query()\n</code></pre> <p>Decorator for registering after_query hook.</p> <p>These functions are after the rule function is run and may modify the response.</p>"},{"location":"reference/nserver/server/#nserver.server.NameServer.append_middleware","title":"append_middleware","text":"<pre><code>append_middleware(middleware: T_middleware) -&gt; None\n</code></pre> <p>Append this middleware to the middleware stack</p> <p>Parameters:</p> Name Type Description Default <code>middleware</code> <code>T_middleware</code> <p>middleware to append</p> required"},{"location":"reference/nserver/server/#nserver.server.NameServer.before_first_query","title":"before_first_query","text":"<pre><code>before_first_query()\n</code></pre> <p>Decorator for registering before_first_query hook.</p> <p>These functions are called when the server receives it's first query, but before any further processesing.</p>"},{"location":"reference/nserver/server/#nserver.server.NameServer.before_query","title":"before_query","text":"<pre><code>before_query()\n</code></pre> <p>Decorator for registering before_query hook.</p> <p>These functions are called before processing each query.</p>"},{"location":"reference/nserver/server/#nserver.server.NameServer.exception_handler","title":"exception_handler","text":"<pre><code>exception_handler(exception_class: type[Exception])\n</code></pre> <p>Decorator for registering a function as an raw exception handler</p> <p>Parameters:</p> Name Type Description Default <code>exception_class</code> <code>type[Exception]</code> <p>The <code>Exception</code> class to register this handler for</p> required"},{"location":"reference/nserver/server/#nserver.server.NameServer.middleware_is_prepared","title":"middleware_is_prepared","text":"<pre><code>middleware_is_prepared() -&gt; bool\n</code></pre> <p>Check if the middleware has been prepared.</p>"},{"location":"reference/nserver/server/#nserver.server.NameServer.process_request","title":"process_request","text":"<pre><code>process_request(query: Query) -&gt; Response\n</code></pre> <p>Process a query passing it through all middleware.</p>"},{"location":"reference/nserver/server/#nserver.server.NameServer.register_after_query","title":"register_after_query","text":"<pre><code>register_after_query(func: AfterQueryHook) -&gt; None\n</code></pre> <p>Register a function to be run on the result of a query.</p> <p>Parameters:</p> Name Type Description Default <code>func</code> <code>AfterQueryHook</code> <p>the function to register</p> required"},{"location":"reference/nserver/server/#nserver.server.NameServer.register_before_first_query","title":"register_before_first_query","text":"<pre><code>register_before_first_query(\n    func: BeforeFirstQueryHook,\n) -&gt; None\n</code></pre> <p>Register a function to be run before the first query.</p> <p>Parameters:</p> Name Type Description Default <code>func</code> <code>BeforeFirstQueryHook</code> <p>the function to register</p> required"},{"location":"reference/nserver/server/#nserver.server.NameServer.register_before_query","title":"register_before_query","text":"<pre><code>register_before_query(func: BeforeQueryHook) -&gt; None\n</code></pre> <p>Register a function to be run before every query.</p> <p>Parameters:</p> Name Type Description Default <code>func</code> <code>BeforeQueryHook</code> <p>the function to register If <code>func</code> returns anything other than <code>None</code> will stop processing the incoming <code>Query</code> and continue to result processing with the return value.</p> required"},{"location":"reference/nserver/server/#nserver.server.NameServer.register_exception_handler","title":"register_exception_handler","text":"<pre><code>register_exception_handler(*args, **kwargs) -&gt; None\n</code></pre> <p>Shortcut for <code>self.exception_handler.set_handler</code></p>"},{"location":"reference/nserver/server/#nserver.server.NameServer.register_rule","title":"register_rule","text":"<pre><code>register_rule(rule: RuleBase) -&gt; None\n</code></pre> <p>Register the given rule</p> <p>Parameters:</p> Name Type Description Default <code>rule</code> <code>RuleBase</code> <p>the rule to register</p> required"},{"location":"reference/nserver/server/#nserver.server.NameServer.register_subserver","title":"register_subserver","text":"<pre><code>register_subserver(\n    nameserver: NameServer,\n    rule_: type[RuleBase] | str | Pattern,\n    *args,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Register a <code>NameServer</code> using <code>smart_make_rule</code>.</p> <p>This allows for composing larger applications.</p> <p>Parameters:</p> Name Type Description Default <code>subserver</code> <p>the <code>SubServer</code> to attach</p> required <code>rule_</code> <code>type[RuleBase] | str | Pattern</code> <p>rule as per <code>nserver.rules.smart_make_rule</code></p> required <code>args</code> <p>extra arguments to provide <code>smart_make_rule</code></p> <code>()</code> <code>kwargs</code> <p>extra keyword arguments to provide <code>smart_make_rule</code></p> <code>{}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>if <code>func</code> is provided in <code>kwargs</code>.</p> <p>New in <code>3.0</code>.</p>"},{"location":"reference/nserver/server/#nserver.server.NameServer.rule","title":"rule","text":"<pre><code>rule(\n    rule_: type[RuleBase] | str | Pattern, *args, **kwargs\n)\n</code></pre> <p>Decorator for registering a function using <code>smart_make_rule</code>.</p> <p>Changed in <code>2.0</code>: This method now uses <code>smart_make_rule</code>.</p> <p>Parameters:</p> Name Type Description Default <code>rule_</code> <code>type[RuleBase] | str | Pattern</code> <p>rule as per <code>nserver.rules.smart_make_rule</code></p> required <code>args</code> <p>extra arguments to provide <code>smart_make_rule</code></p> <code>()</code> <code>kwargs</code> <p>extra keyword arguments to provide <code>smart_make_rule</code></p> <code>{}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>if <code>func</code> is provided in <code>kwargs</code>.</p>"},{"location":"reference/nserver/server/#nserver.server.NameServer.send_query_to_rules","title":"send_query_to_rules","text":"<pre><code>send_query_to_rules(query: Query) -&gt; Response\n</code></pre> <p>Send a query to be processed by the rules of this instance.</p> <p>Although intended to be the final step after passing a query through all middleware, this method can be used to bypass the middleware of this server such as for testing.</p>"},{"location":"reference/nserver/server/#nserver.server.RawNameServer","title":"RawNameServer","text":"<pre><code>RawNameServer(nameserver: NameServer)\n</code></pre> <p>               Bases: <code>MiddlewareMixin[RawMiddleware, RawExceptionHandlerMiddleware]</code>, <code>LoggingMixin</code></p> <p>Server that handles raw <code>dnslib.DNSRecord</code> queries.</p> <p>This allows interacting with the underlying DNS messages from our dns library. As such this server is implementation dependent and may change from time to time.</p> <p>In general you should use <code>NameServer</code> as it is implementation independent.</p> <p>New in <code>3.0</code>.</p>"},{"location":"reference/nserver/server/#nserver.server.RawNameServer.exception_handler_middleware","title":"exception_handler_middleware  <code>property</code>","text":"<pre><code>exception_handler_middleware: T_exception_handler\n</code></pre> <p>Read only accessor for this server's middleware exception handler</p>"},{"location":"reference/nserver/server/#nserver.server.RawNameServer.middleware","title":"middleware  <code>property</code>","text":"<pre><code>middleware: list[T_middleware]\n</code></pre> <p>Accssor for this servers middleware.</p> <p>If the server has been prepared then returns a copy of the prepared middleware. Otherwise returns a mutable list of the registered middleware.</p>"},{"location":"reference/nserver/server/#nserver.server.RawNameServer.append_middleware","title":"append_middleware","text":"<pre><code>append_middleware(middleware: T_middleware) -&gt; None\n</code></pre> <p>Append this middleware to the middleware stack</p> <p>Parameters:</p> Name Type Description Default <code>middleware</code> <code>T_middleware</code> <p>middleware to append</p> required"},{"location":"reference/nserver/server/#nserver.server.RawNameServer.exception_handler","title":"exception_handler","text":"<pre><code>exception_handler(exception_class: type[Exception])\n</code></pre> <p>Decorator for registering a function as an raw exception handler</p> <p>Parameters:</p> Name Type Description Default <code>exception_class</code> <code>type[Exception]</code> <p>The <code>Exception</code> class to register this handler for</p> required"},{"location":"reference/nserver/server/#nserver.server.RawNameServer.middleware_is_prepared","title":"middleware_is_prepared","text":"<pre><code>middleware_is_prepared() -&gt; bool\n</code></pre> <p>Check if the middleware has been prepared.</p>"},{"location":"reference/nserver/server/#nserver.server.RawNameServer.process_request","title":"process_request","text":"<pre><code>process_request(request: RawRecord) -&gt; RawRecord\n</code></pre> <p>Process a request using this server.</p> <p>This will pass the request through the middleware stack.</p>"},{"location":"reference/nserver/server/#nserver.server.RawNameServer.register_exception_handler","title":"register_exception_handler","text":"<pre><code>register_exception_handler(*args, **kwargs) -&gt; None\n</code></pre> <p>Shortcut for <code>self.exception_handler.set_handler</code></p>"},{"location":"reference/nserver/server/#nserver.server.RawNameServer.send_request_to_nameserver","title":"send_request_to_nameserver","text":"<pre><code>send_request_to_nameserver(record: RawRecord) -&gt; RawRecord\n</code></pre> <p>Send a request to the <code>NameServer</code> of this instance.</p> <p>Although this is the final step after passing a request through all middleware, it can be called directly to avoid using middleware such as when testing.</p>"},{"location":"reference/nserver/server/#nserver.server.RulesMixin","title":"RulesMixin","text":"<pre><code>RulesMixin()\n</code></pre> <p>               Bases: <code>LoggingMixin</code></p> <p>Base class for rules based functionality`</p> <p>Attributes:</p> Name Type Description <code>rules</code> <code>list[RuleBase]</code> <p>reistered rules</p> <p>New in <code>3.0</code>.</p>"},{"location":"reference/nserver/server/#nserver.server.RulesMixin.register_rule","title":"register_rule","text":"<pre><code>register_rule(rule: RuleBase) -&gt; None\n</code></pre> <p>Register the given rule</p> <p>Parameters:</p> Name Type Description Default <code>rule</code> <code>RuleBase</code> <p>the rule to register</p> required"},{"location":"reference/nserver/server/#nserver.server.RulesMixin.rule","title":"rule","text":"<pre><code>rule(\n    rule_: type[RuleBase] | str | Pattern, *args, **kwargs\n)\n</code></pre> <p>Decorator for registering a function using <code>smart_make_rule</code>.</p> <p>Changed in <code>2.0</code>: This method now uses <code>smart_make_rule</code>.</p> <p>Parameters:</p> Name Type Description Default <code>rule_</code> <code>type[RuleBase] | str | Pattern</code> <p>rule as per <code>nserver.rules.smart_make_rule</code></p> required <code>args</code> <p>extra arguments to provide <code>smart_make_rule</code></p> <code>()</code> <code>kwargs</code> <p>extra keyword arguments to provide <code>smart_make_rule</code></p> <code>{}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>if <code>func</code> is provided in <code>kwargs</code>.</p>"},{"location":"reference/nserver/transport/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> transport","text":""},{"location":"reference/nserver/transport/#nserver.transport","title":"nserver.transport","text":""},{"location":"reference/nserver/transport/#nserver.transport.CachedConnection","title":"CachedConnection  <code>dataclass</code>","text":"<pre><code>CachedConnection(\n    connection: socket,\n    remote_address: tuple[str, int],\n    last_data_time: float,\n    selector_key: SelectorKey,\n    cache_key: CacheKey,\n)\n</code></pre> <p>Dataclass for storing information about a TCP connection</p> <p>Attributes:</p> Name Type Description <code>connection</code> <code>socket</code> <p>the actual socket we are connected to</p> <code>remote_address</code> <code>tuple[str, int]</code> <p>the socket's peername</p> <code>last_data_time</code> <code>float</code> <p>timestamp when we last received data from this socket</p> <code>selector_key</code> <code>SelectorKey</code> <p>key used by our TCP Transport's selector</p> <code>cache_key</code> <code>CacheKey</code> <p>the key used to store this connection in the cache</p>"},{"location":"reference/nserver/transport/#nserver.transport.MessageContainer","title":"MessageContainer","text":"<pre><code>MessageContainer(\n    raw_data: bytes,\n    transport: TransportBase,\n    transport_data: Any,\n    remote_client: str | tuple[str, int],\n)\n</code></pre> <p>Class for holding DNS messages and the transport they originated from.</p> <p>Used to simplify the interface (and allow for threading etc later).</p> <p>Create new message container</p> <p>Parameters:</p> Name Type Description Default <code>raw_data</code> <code>bytes</code> <p>The raw message pulled from the transport. It will parsed as a DNS message.</p> required <code>transport</code> <code>TransportBase</code> <p>The transport instance that created this message (e.g. <code>self</code>). Messages must only be returned to this transport instance when responding (even if it would be possible for another instance to respond (e.g. with UDP processing)). As such transports should rely on only receiving messages that they created (opposed to <code>assert message.transport is self</code>).</p> required <code>transport_data</code> <code>Any</code> <p>Data that the transport instance wishes to store with this message for later use. What is stored is up to the transport, and it is up to the transport implementation to correctly handle it.</p> required <code>remote_client</code> <code>str | tuple[str, int]</code> <p>Representation of the remote client that sent this DNS request. This value is primarily to allow logging and debugging of invalid requests. Whilst transport instances must set this value, they should NOT use it for processing.</p> required"},{"location":"reference/nserver/transport/#nserver.transport.MessageContainer.get_response_bytes","title":"get_response_bytes","text":"<pre><code>get_response_bytes()\n</code></pre> <p>Convert response object to bytes</p>"},{"location":"reference/nserver/transport/#nserver.transport.TCPMessageData","title":"TCPMessageData  <code>dataclass</code>","text":"<pre><code>TCPMessageData(socket: socket)\n</code></pre> <p>Message.transport_data for TCP transports</p> <p>Attributes:</p> Name Type Description <code>socket</code> <code>socket</code> <p>the socket this message was received on</p>"},{"location":"reference/nserver/transport/#nserver.transport.TCPv4Transport","title":"TCPv4Transport","text":"<pre><code>TCPv4Transport(address: str, port: int)\n</code></pre> <p>               Bases: <code>TransportBase</code></p> <p>Transport class for IPv4 TCP.</p> References <ul> <li>https://tools.ietf.org/html/rfc7766#section-8</li> </ul>"},{"location":"reference/nserver/transport/#nserver.transport.TCPv4Transport.receive_message","title":"receive_message","text":"<pre><code>receive_message() -&gt; MessageContainer\n</code></pre> <p>As per parent class</p>"},{"location":"reference/nserver/transport/#nserver.transport.TCPv4Transport.send_message_response","title":"send_message_response","text":"<pre><code>send_message_response(message: MessageContainer) -&gt; None\n</code></pre> <p>As per parent class</p>"},{"location":"reference/nserver/transport/#nserver.transport.TCPv4Transport.start_server","title":"start_server","text":"<pre><code>start_server(timeout: int = 60) -&gt; None\n</code></pre> <p>As per parent class</p>"},{"location":"reference/nserver/transport/#nserver.transport.TCPv4Transport.stop_server","title":"stop_server","text":"<pre><code>stop_server() -&gt; None\n</code></pre> <p>As per parent class</p>"},{"location":"reference/nserver/transport/#nserver.transport.TcpState","title":"TcpState","text":"<p>               Bases: <code>IntEnum</code></p> <p>State of a TCP connection</p>"},{"location":"reference/nserver/transport/#nserver.transport.TransportBase","title":"TransportBase","text":"<pre><code>TransportBase()\n</code></pre> <p>               Bases: <code>LoggingMixin</code></p> <p>Base class for all transports</p>"},{"location":"reference/nserver/transport/#nserver.transport.TransportBase.receive_message","title":"receive_message","text":"<pre><code>receive_message() -&gt; MessageContainer\n</code></pre> <p>Receive a message from the running server</p>"},{"location":"reference/nserver/transport/#nserver.transport.TransportBase.send_message_response","title":"send_message_response","text":"<pre><code>send_message_response(message: MessageContainer) -&gt; None\n</code></pre> <p>Respond to a message that was received by the server</p>"},{"location":"reference/nserver/transport/#nserver.transport.TransportBase.start_server","title":"start_server","text":"<pre><code>start_server(timeout: int = 60) -&gt; None\n</code></pre> <p>Start transport's server</p>"},{"location":"reference/nserver/transport/#nserver.transport.TransportBase.stop_server","title":"stop_server","text":"<pre><code>stop_server() -&gt; None\n</code></pre> <p>Stop transport's server</p>"},{"location":"reference/nserver/transport/#nserver.transport.UDPMessageData","title":"UDPMessageData  <code>dataclass</code>","text":"<pre><code>UDPMessageData(remote_address: tuple[str, int])\n</code></pre> <p>Message.transport_data for UDP transports</p> <p>Attributes:</p> Name Type Description <code>remote_address</code> <code>tuple[str, int]</code> <p>UDP peername that this message was received from</p>"},{"location":"reference/nserver/transport/#nserver.transport.UDPv4Transport","title":"UDPv4Transport","text":"<pre><code>UDPv4Transport(address: str, port: int)\n</code></pre> <p>               Bases: <code>TransportBase</code></p> <p>Transport class for IPv4 UDP.</p>"},{"location":"reference/nserver/transport/#nserver.transport.UDPv4Transport.receive_message","title":"receive_message","text":"<pre><code>receive_message() -&gt; MessageContainer\n</code></pre> <p>As per parent class</p>"},{"location":"reference/nserver/transport/#nserver.transport.UDPv4Transport.send_message_response","title":"send_message_response","text":"<pre><code>send_message_response(message: MessageContainer) -&gt; None\n</code></pre> <p>As per parent class</p>"},{"location":"reference/nserver/transport/#nserver.transport.UDPv4Transport.start_server","title":"start_server","text":"<pre><code>start_server(timeout=60) -&gt; None\n</code></pre> <p>As per parent class</p>"},{"location":"reference/nserver/transport/#nserver.transport.UDPv4Transport.stop_server","title":"stop_server","text":"<pre><code>stop_server() -&gt; None\n</code></pre> <p>As per parent class</p>"},{"location":"reference/nserver/transport/#nserver.transport.UDPv6Transport","title":"UDPv6Transport","text":"<pre><code>UDPv6Transport(address: str, port: int)\n</code></pre> <p>               Bases: <code>UDPv4Transport</code></p> <p>Transport class for IPv6 UDP.</p>"},{"location":"reference/nserver/transport/#nserver.transport.UDPv6Transport.receive_message","title":"receive_message","text":"<pre><code>receive_message() -&gt; MessageContainer\n</code></pre> <p>As per parent class</p>"},{"location":"reference/nserver/transport/#nserver.transport.UDPv6Transport.send_message_response","title":"send_message_response","text":"<pre><code>send_message_response(message: MessageContainer) -&gt; None\n</code></pre> <p>As per parent class</p>"},{"location":"reference/nserver/transport/#nserver.transport.UDPv6Transport.start_server","title":"start_server","text":"<pre><code>start_server(timeout=60) -&gt; None\n</code></pre> <p>As per parent class</p>"},{"location":"reference/nserver/transport/#nserver.transport.UDPv6Transport.stop_server","title":"stop_server","text":"<pre><code>stop_server() -&gt; None\n</code></pre> <p>As per parent class</p>"},{"location":"reference/nserver/transport/#nserver.transport.get_tcp_info","title":"get_tcp_info","text":"<pre><code>get_tcp_info(connection: socket) -&gt; tuple\n</code></pre> <p>Get <code>socket.TCP_INFO</code> from socket</p> <p>Parameters:</p> Name Type Description Default <code>connection</code> <code>socket</code> <p>the socket to inspect</p> required <p>Returns:</p> Type Description <code>tuple</code> <p>Tuple of 28 integers.</p> <p>Strictly speaking the data returned is platform dependent as will be whatever is in <code>/usr/include/linux/tcp.h</code>. For our purposes we cap it at the first 28 values.</p>"},{"location":"reference/nserver/transport/#nserver.transport.get_tcp_state","title":"get_tcp_state","text":"<pre><code>get_tcp_state(connection: socket) -&gt; TcpState\n</code></pre> <p>Get the <code>TcpState</code> of a socket</p> <p>Parameters:</p> Name Type Description Default <code>connection</code> <code>socket</code> <p>the socket to inspect</p> required"},{"location":"reference/nserver/transport/#nserver.transport.recv_data","title":"recv_data","text":"<pre><code>recv_data(\n    data_length: int,\n    connection: socket,\n    existing_data: bytes = b\"\",\n    timeout: int = 10,\n) -&gt; bytes\n</code></pre> <p>Receive a given amount of data from a socket.</p> <p>Parameters:</p> Name Type Description Default <code>data_length</code> <code>int</code> <p>number of bytes to receive</p> required <code>connection</code> <code>socket</code> <p>the socket to receive data from</p> required <code>existing_data</code> <code>bytes</code> <p>data that is added to the response before we collect further data</p> <code>b''</code> <code>timeout</code> <code>int</code> <p>time before giving up in seconds</p> <code>10</code> <p>Raises:</p> Type Description <code>TimeoutError</code> <p>timeout was reached before we finished receiving the data</p>"},{"location":"reference/nserver/util/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> util","text":""},{"location":"reference/nserver/util/#nserver.util","title":"nserver.util","text":""},{"location":"reference/nserver/util/#nserver.util.is_unsigned_int_size","title":"is_unsigned_int_size","text":"<pre><code>is_unsigned_int_size(\n    value: int,\n    bits: int,\n    *,\n    throw_error: bool = False,\n    value_name: str = \"value\"\n) -&gt; bool\n</code></pre> <p>Check if a given integer fits within an unsigned integer of <code>bits</code> bits.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>int</code> <p>integer to check</p> required <code>bits</code> <code>int</code> <p>number of bits, must be <code>&gt;0</code>.</p> required <code>throw_error</code> <code>bool</code> <p>throw a <code>ValueError</code> if the result is <code>False</code></p> <code>False</code> <code>value_name</code> <code>str</code> <p>name to use when throwing an error</p> <code>'value'</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>if invalid <code>bits</code> provided</p> <code>ValueError</code> <p>if <code>throw_error</code> is <code>True</code> and the result would be <code>False</code>.</p>"}]}